# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'footprint.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSlot, Qt

from os.path import isfile 
from os import getcwd, remove, system, listdir
import numpy as np 
import paramiko as FTP 

from basicfunctions import  findout_offset, rotatePoints, combinationWords
from smart import ResultSfric, SFRIC, lateralShift_fromSFRIC, readSMART_Inp
from layout import readBodyLayout, LayoutMesh_From_axi, getNode_2dMesh, makeDatFile_ODB
from postprocess import readDAT,  interpolation_footprint_pressure, \
    contPress, FPC, SearchPoints, FOOTPRINT, calculatingActualArea, extract_profile_crown
from canvas_plotting import myCanvas 
from files import makingFullFilePath_linux, simulationCodes

colors = ['black', 'blue', 'red', 'green', 'chocolate', 'cyan', 'magenta', 'yellow', 
        'aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 
        'azure', 'beige', 'bisque', 'black', 'blanchedalmond',
         'blueviolet', 'brown', 'burlywood', 'cadetblue',
          'chartreuse', 'coral', 'cornflowerblue', 'cornsilk', 
          'crimson', 'cyan', 'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 
          'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta', 'darkolivegreen', 
          'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 
          'darkslateblue', 'darkslategray', 'darkslategrey', 'darkturquoise', 
          'darkviolet', 'deeppink', 'deepskyblue', 'dimgray', 'dimgrey', 
          'dodgerblue', 'firebrick', 'floralwhite', 'forestgreen', 'fuchsia',
           'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green', 
           'greenyellow', 'grey', 'honeydew', 'hotpink', 'indianred', 'indigo', 
           'ivory', 'khaki', 'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 
           'lightblue', 'lightcoral', 'lightcyan', 'lightgoldenrodyellow', 'lightgray',
            'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen', 
            'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 
            'lightyellow', 'lime', 'limegreen', 'linen', 'magenta', 'maroon',
             'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 
             'mediumseagreen', 'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 
             'mediumvioletred', 'midnightblue', 'mintcream', 'mistyrose', 'moccasin',
              'navajowhite', 'navy', 'oldlace', 'olive', 'olivedrab', 'orange', 'orangered',
               'orchid', 'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred',
                'papayawhip', 'peachpuff', 'peru', 'pink', 'plum', 'powderblue', 'purple', 
                'rebeccapurple', 'red', 'rosybrown', 'royalblue', 'saddlebrown', 'salmon',
                 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue', 
                 'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue', 'tan', 'teal', 
                 'thistle', 'tomato', 'turquoise', 'violet', 'wheat', 'white', 'whitesmoke', 'yellow', 'yellowgreen']
linestyles = ['-', '--', '-.', ':', '']
mark = ['o', "s", "v", "^", ">", "<", '+', '*', 'D', "1", "2", '3', '4' ]

class MyQTableWidgetItemCheckBox(QtWidgets.QTableWidgetItem):
    """
    checkbox widget 과 같은 cell 에  item 으로 들어감.
    checkbox 값 변화에 따라, 사용자정의 data를 기준으로 정렬 기능 구현함.
    """
    def __init__(self):
        super().__init__()
        # self.setData(Qt.UserRole, 0)

    def __lt__(self, other):
        # print(type(self.data(Qt.UserRole)))
        return self.data(Qt.UserRole) < other.data(Qt.UserRole)

    def my_setdata(self, value):
        # print("my setdata ", value)
        self.setData(Qt.UserRole, value)
        # print("row ", self.row())

class MyCheckBox(QtWidgets.QCheckBox):
    def __init__(self, item):
        """
        :param item: QTableWidgetItem instance
        """
        super().__init__()
        self.item = item
        self.mycheckvalue = 0   # 0 --> unchecked, 2 --> checked
        self.stateChanged.connect(self.__checkbox_change)

    def __checkbox_change(self, checkvalue):
        # print("myclass...check change... ", checkvalue)
        self.mycheckvalue = checkvalue
        
        # print("checkbox row= ", self.get_row())
        try : 
            N = self.item.row()
        except: 
            N = 0 
        return N 

    def get_row(self):
        try : 
            N = self.item.row()
        except: 
            N = 0 
        return N 



import tree_widget 

def connectFTP(): 
    host = '10.82.66.65'
    pw = user = 'h20200155'
    # pw = 'sartfiper'
    # user = 'fiper'

    import paramiko as FTP 
    ftp = FTP.SSHClient()
    ftp.set_missing_host_key_policy(FTP.AutoAddPolicy())
    try: 
        port = 22 
        ftp.connect(host, username=user, password=pw, port=port, timeout=3)
        sftp = ftp.open_sftp()
        return sftp, ftp  
    except Exception as EX:
        print (EX)
        return False    
        
class StdoutRedirectText(QtCore.QObject):
    printOccur = QtCore.pyqtSignal(str, str, name="print")
 
    def __init__(self, *param):
        QtCore.QObject.__init__(self, None)
        self.daemon = True
        self.sysstdout = sys.stdout.write
        self.sysstderr = sys.stderr.write
 
    def stop(self):
        sys.stdout.write = self.sysstdout
        sys.stderr.write = self.sysstderr
 
    def start(self):
        sys.stdout.write = self.write
        sys.stderr.write = lambda msg : self.write(msg, color="red")
 
    def write(self, s, color="black"):
        sys.stdout.flush()
        self.printOccur.emit(s, color)

class StdoutRedirect(QtCore.QObject):
    printOccur = QtCore.pyqtSignal(str, str, name="print")
 
    def __init__(self, *param):
        QtCore.QObject.__init__(self, None)
        self.daemon = True
        self.sysstdout = sys.stdout.write
        self.sysstderr = sys.stderr.write
 
    def stop(self):
        sys.stdout.write = self.sysstdout
        sys.stderr.write = self.sysstderr
 
    def start(self):
        sys.stdout.write = self.write
        sys.stderr.write = lambda msg : self.write(msg, color="red")
 
    def write(self, s, color="black"):
        sys.stdout.flush()
        self.printOccur.emit(s, color)

class Ui_MainWindow(object):
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1465, 961)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.verticalLayout_image = QtWidgets.QVBoxLayout()
        self.verticalLayout_image.setObjectName("verticalLayout_image")
        self.horizontalLayout_9.addLayout(self.verticalLayout_image)
        self.verticalLayout_board = QtWidgets.QVBoxLayout()
        self.verticalLayout_board.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.verticalLayout_board.setObjectName("verticalLayout_board")
        self.verticalLayout_menu = QtWidgets.QVBoxLayout()
        self.verticalLayout_menu.setObjectName("verticalLayout_menu")
        self.Group_connection = QtWidgets.QGroupBox(self.centralwidget)
        self.Group_connection.setMinimumSize(QtCore.QSize(330, 30))
        self.Group_connection.setMaximumSize(QtCore.QSize(330, 30))
        self.Group_connection.setTitle("")
        self.Group_connection.setObjectName("Group_connection")
        self.lineEdit_address = QtWidgets.QLineEdit(self.Group_connection)
        self.lineEdit_address.setGeometry(QtCore.QRect(55, 4, 71, 23))
        self.lineEdit_address.setMaximumSize(QtCore.QSize(100, 30))
        self.lineEdit_address.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_address.setObjectName("lineEdit_address")
        self.label_ID = QtWidgets.QLabel(self.Group_connection)
        self.label_ID.setGeometry(QtCore.QRect(132, 5, 21, 21))
        self.label_ID.setMaximumSize(QtCore.QSize(150, 25))
        self.label_ID.setObjectName("label_ID")
        self.lineEdit_hpc_ID = QtWidgets.QLineEdit(self.Group_connection)
        self.lineEdit_hpc_ID.setGeometry(QtCore.QRect(152, 4, 91, 23))
        self.lineEdit_hpc_ID.setMaximumSize(QtCore.QSize(100, 30))
        self.lineEdit_hpc_ID.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_hpc_ID.setObjectName("lineEdit_hpc_ID")
        self.push_connection = QtWidgets.QPushButton(self.Group_connection)
        self.push_connection.setGeometry(QtCore.QRect(250, 4, 71, 23))
        self.push_connection.setMaximumSize(QtCore.QSize(200, 30))
        self.push_connection.setObjectName("push_connection")
        self.check_FTP = QtWidgets.QCheckBox(self.Group_connection)
        self.check_FTP.setGeometry(QtCore.QRect(3, 5, 51, 23))
        self.check_FTP.setMaximumSize(QtCore.QSize(110, 25))
        self.check_FTP.setObjectName("check_FTP")
        self.verticalLayout_menu.addWidget(self.Group_connection)
        self.group_SimulationType = QtWidgets.QGroupBox(self.centralwidget)
        self.group_SimulationType.setMinimumSize(QtCore.QSize(330, 35))
        self.group_SimulationType.setMaximumSize(QtCore.QSize(330, 35))
        self.group_SimulationType.setTitle("")
        self.group_SimulationType.setObjectName("group_SimulationType")
        self.radio_Single = QtWidgets.QRadioButton(self.group_SimulationType)
        self.radio_Single.setGeometry(QtCore.QRect(5, 9, 81, 17))
        self.radio_Single.setChecked(True)
        self.radio_Single.setObjectName("radio_Single")
        self.radio_DOE = QtWidgets.QRadioButton(self.group_SimulationType)
        self.radio_DOE.setGeometry(QtCore.QRect(92, 9, 61, 17))
        self.radio_DOE.setObjectName("radio_DOE")
        self.lineEdit_DOE_ID = QtWidgets.QLineEdit(self.group_SimulationType)
        self.lineEdit_DOE_ID.setGeometry(QtCore.QRect(148, 5, 80, 25))
        self.lineEdit_DOE_ID.setMinimumSize(QtCore.QSize(80, 0))
        self.lineEdit_DOE_ID.setMaximumSize(QtCore.QSize(80, 25))
        self.lineEdit_DOE_ID.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_DOE_ID.setObjectName("lineEdit_DOE_ID")
        self.radio_Manual = QtWidgets.QRadioButton(self.group_SimulationType)
        self.radio_Manual.setGeometry(QtCore.QRect(253, 10, 61, 17))
        self.radio_Manual.setObjectName("radio_Manual")
        self.verticalLayout_menu.addWidget(self.group_SimulationType)
        self.horizontalLayou_min_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayou_min_2.setObjectName("horizontalLayou_min_2")
        self.lineEdit_0_Location = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_0_Location.setMinimumSize(QtCore.QSize(35, 25))
        self.lineEdit_0_Location.setMaximumSize(QtCore.QSize(35, 30))
        self.lineEdit_0_Location.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_0_Location.setObjectName("lineEdit_0_Location")
        self.horizontalLayou_min_2.addWidget(self.lineEdit_0_Location)
        self.lineEdit_1_VT_Number = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_1_VT_Number.setMinimumSize(QtCore.QSize(95, 25))
        self.lineEdit_1_VT_Number.setMaximumSize(QtCore.QSize(95, 30))
        self.lineEdit_1_VT_Number.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_1_VT_Number.setObjectName("lineEdit_1_VT_Number")
        self.horizontalLayou_min_2.addWidget(self.lineEdit_1_VT_Number)
        self.lineEdit_3_VT_Serial = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3_VT_Serial.setMinimumSize(QtCore.QSize(45, 25))
        self.lineEdit_3_VT_Serial.setMaximumSize(QtCore.QSize(45, 30))
        self.lineEdit_3_VT_Serial.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_3_VT_Serial.setObjectName("lineEdit_3_VT_Serial")
        self.horizontalLayou_min_2.addWidget(self.lineEdit_3_VT_Serial)
        self.lineEdit_2_VT_Revision = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2_VT_Revision.setMinimumSize(QtCore.QSize(20, 25))
        self.lineEdit_2_VT_Revision.setMaximumSize(QtCore.QSize(40, 30))
        self.lineEdit_2_VT_Revision.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_2_VT_Revision.setObjectName("lineEdit_2_VT_Revision")
        self.horizontalLayou_min_2.addWidget(self.lineEdit_2_VT_Revision)
        self.lineEdit_4_Sim_Type = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_4_Sim_Type.setMinimumSize(QtCore.QSize(40, 25))
        self.lineEdit_4_Sim_Type.setMaximumSize(QtCore.QSize(40, 30))
        self.lineEdit_4_Sim_Type.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_4_Sim_Type.setObjectName("lineEdit_4_Sim_Type")
        self.horizontalLayou_min_2.addWidget(self.lineEdit_4_Sim_Type)
        self.lineEdit_5_Sim_Num = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_5_Sim_Num.setMinimumSize(QtCore.QSize(45, 25))
        self.lineEdit_5_Sim_Num.setMaximumSize(QtCore.QSize(45, 30))
        self.lineEdit_5_Sim_Num.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_5_Sim_Num.setObjectName("lineEdit_5_Sim_Num")
        self.horizontalLayou_min_2.addWidget(self.lineEdit_5_Sim_Num)
        self.verticalLayout_menu.addLayout(self.horizontalLayou_min_2)
        self.lineEdit_jobDir = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_jobDir.setMinimumSize(QtCore.QSize(330, 25))
        self.lineEdit_jobDir.setMaximumSize(QtCore.QSize(330, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lineEdit_jobDir.setFont(font)
        self.lineEdit_jobDir.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_jobDir.setObjectName("lineEdit_jobDir")
        self.verticalLayout_menu.addWidget(self.lineEdit_jobDir)
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setMinimumSize(QtCore.QSize(0, 30))
        self.groupBox_4.setMaximumSize(QtCore.QSize(330, 30))
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.lineEdit_smartFile = QtWidgets.QLineEdit(self.groupBox_4)
        self.lineEdit_smartFile.setGeometry(QtCore.QRect(0, 2, 250, 25))
        self.lineEdit_smartFile.setMinimumSize(QtCore.QSize(250, 25))
        self.lineEdit_smartFile.setMaximumSize(QtCore.QSize(250, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lineEdit_smartFile.setFont(font)
        self.lineEdit_smartFile.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_smartFile.setObjectName("lineEdit_smartFile")
        self.push_searchFile = QtWidgets.QPushButton(self.groupBox_4)
        self.push_searchFile.setGeometry(QtCore.QRect(254, 3, 75, 23))
        self.push_searchFile.setObjectName("push_searchFile")
        self.verticalLayout_menu.addWidget(self.groupBox_4)
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setMinimumSize(QtCore.QSize(330, 30))
        self.groupBox_5.setMaximumSize(QtCore.QSize(330, 30))
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.lineEdit_patternMesh = QtWidgets.QLineEdit(self.groupBox_5)
        self.lineEdit_patternMesh.setGeometry(QtCore.QRect(0, 2, 250, 25))
        self.lineEdit_patternMesh.setMinimumSize(QtCore.QSize(250, 25))
        self.lineEdit_patternMesh.setMaximumSize(QtCore.QSize(250, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lineEdit_patternMesh.setFont(font)
        self.lineEdit_patternMesh.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_patternMesh.setObjectName("lineEdit_patternMesh")
        self.push_searchMesh = QtWidgets.QPushButton(self.groupBox_5)
        self.push_searchMesh.setGeometry(QtCore.QRect(254, 2, 75, 23))
        self.push_searchMesh.setObjectName("push_searchMesh")
        self.verticalLayout_menu.addWidget(self.groupBox_5)
        self.horizontalLayout_boundarybox_loading = QtWidgets.QHBoxLayout()
        self.horizontalLayout_boundarybox_loading.setObjectName("horizontalLayout_boundarybox_loading")
        self.pushButton_GeneratngFoot = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_GeneratngFoot.setMinimumSize(QtCore.QSize(0, 35))
        self.pushButton_GeneratngFoot.setMaximumSize(QtCore.QSize(330, 30))
        self.pushButton_GeneratngFoot.setObjectName("pushButton_GeneratngFoot")
        self.horizontalLayout_boundarybox_loading.addWidget(self.pushButton_GeneratngFoot)
        self.verticalLayout_menu.addLayout(self.horizontalLayout_boundarybox_loading)
        self.filename = QtWidgets.QLabel(self.centralwidget)
        self.filename.setMinimumSize(QtCore.QSize(0, 25))
        self.filename.setMaximumSize(QtCore.QSize(330, 30))
        self.filename.setFrameShape(QtWidgets.QFrame.Box)
        self.filename.setObjectName("filename")
        self.verticalLayout_menu.addWidget(self.filename)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setMinimumSize(QtCore.QSize(0, 30))
        self.groupBox_3.setMaximumSize(QtCore.QSize(330, 16777215))
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.checkBox_6 = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox_6.setGeometry(QtCore.QRect(10, 7, 50, 16))
        self.checkBox_6.setMaximumSize(QtCore.QSize(50, 20))
        self.checkBox_6.setObjectName("checkBox_6")
        self.radio_plus0 = QtWidgets.QRadioButton(self.groupBox_3)
        self.radio_plus0.setGeometry(QtCore.QRect(70, 8, 35, 16))
        self.radio_plus0.setMinimumSize(QtCore.QSize(35, 0))
        self.radio_plus0.setMaximumSize(QtCore.QSize(30, 25))
        self.radio_plus0.setObjectName("radio_plus0")
        self.radio_plus6 = QtWidgets.QRadioButton(self.groupBox_3)
        self.radio_plus6.setGeometry(QtCore.QRect(130, 8, 35, 16))
        self.radio_plus6.setMinimumSize(QtCore.QSize(35, 0))
        self.radio_plus6.setMaximumSize(QtCore.QSize(30, 25))
        self.radio_plus6.setObjectName("radio_plus6")
        self.radio_plus12 = QtWidgets.QRadioButton(self.groupBox_3)
        self.radio_plus12.setGeometry(QtCore.QRect(190, 8, 40, 16))
        self.radio_plus12.setMinimumSize(QtCore.QSize(40, 0))
        self.radio_plus12.setMaximumSize(QtCore.QSize(30, 25))
        self.radio_plus12.setObjectName("radio_plus12")
        self.checkBox_showProfile = QtWidgets.QCheckBox(self.groupBox_3)
        self.checkBox_showProfile.setGeometry(QtCore.QRect(250, 7, 70, 20))
        self.checkBox_showProfile.setMaximumSize(QtCore.QSize(70, 20))
        self.checkBox_showProfile.setObjectName("checkBox_showProfile")
        self.verticalLayout_menu.addWidget(self.groupBox_3)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setMinimumSize(QtCore.QSize(330, 35))
        self.groupBox.setMaximumSize(QtCore.QSize(330, 35))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(0, 8, 331, 19))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_SelectImage = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_SelectImage.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_SelectImage.setObjectName("horizontalLayout_SelectImage")
        self.radioButton_print1 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_print1.setMaximumSize(QtCore.QSize(40, 16777215))
        self.radioButton_print1.setObjectName("radioButton_print1")
        self.horizontalLayout_SelectImage.addWidget(self.radioButton_print1)
        self.radioButton_print2 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_print2.setMaximumSize(QtCore.QSize(40, 16777215))
        self.radioButton_print2.setObjectName("radioButton_print2")
        self.horizontalLayout_SelectImage.addWidget(self.radioButton_print2)
        self.radioButton_print3 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_print3.setMaximumSize(QtCore.QSize(40, 16777215))
        self.radioButton_print3.setObjectName("radioButton_print3")
        self.horizontalLayout_SelectImage.addWidget(self.radioButton_print3)
        self.radioButton_print4 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_print4.setMaximumSize(QtCore.QSize(40, 16777215))
        self.radioButton_print4.setObjectName("radioButton_print4")
        self.horizontalLayout_SelectImage.addWidget(self.radioButton_print4)
        self.radioButton_print5 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_print5.setMaximumSize(QtCore.QSize(40, 16777215))
        self.radioButton_print5.setObjectName("radioButton_print5")
        self.horizontalLayout_SelectImage.addWidget(self.radioButton_print5)
        self.radioButton_print6 = QtWidgets.QRadioButton(self.layoutWidget)
        self.radioButton_print6.setMaximumSize(QtCore.QSize(40, 16777215))
        self.radioButton_print6.setObjectName("radioButton_print6")
        self.horizontalLayout_SelectImage.addWidget(self.radioButton_print6)
        self.verticalLayout_menu.addWidget(self.groupBox)
        self.lineEdit_jobFile = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_jobFile.setMinimumSize(QtCore.QSize(330, 25))
        self.lineEdit_jobFile.setMaximumSize(QtCore.QSize(330, 30))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.lineEdit_jobFile.setFont(font)
        self.lineEdit_jobFile.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.lineEdit_jobFile.setObjectName("lineEdit_jobFile")
        self.verticalLayout_menu.addWidget(self.lineEdit_jobFile)
        self.horizontalLayout_boundarybox = QtWidgets.QHBoxLayout()
        self.horizontalLayout_boundarybox.setObjectName("horizontalLayout_boundarybox")
        self.pushButton_compare = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_compare.setMinimumSize(QtCore.QSize(0, 35))
        self.pushButton_compare.setMaximumSize(QtCore.QSize(330, 35))
        self.pushButton_compare.setObjectName("pushButton_compare")
        self.horizontalLayout_boundarybox.addWidget(self.pushButton_compare)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.checkBox_showGrv = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_showGrv.setMaximumSize(QtCore.QSize(70, 20))
        self.checkBox_showGrv.setObjectName("checkBox_showGrv")
        self.verticalLayout.addWidget(self.checkBox_showGrv)
        self.checkBox_showBndPressure = QtWidgets.QCheckBox(self.centralwidget)
        self.checkBox_showBndPressure.setMaximumSize(QtCore.QSize(70, 20))
        self.checkBox_showBndPressure.setObjectName("checkBox_showBndPressure")
        self.verticalLayout.addWidget(self.checkBox_showBndPressure)
        self.horizontalLayout_boundarybox.addLayout(self.verticalLayout)
        self.verticalLayout_menu.addLayout(self.horizontalLayout_boundarybox)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setMinimumSize(QtCore.QSize(330, 0))
        self.tableWidget.setMaximumSize(QtCore.QSize(330, 16777215))
        self.tableWidget.setObjectName("tableWidget")
        # self.tableWidget.setColumnCount(2)
        # self.tableWidget.setRowCount(0)
        self.setTable()
        self.verticalLayout_menu.addWidget(self.tableWidget)
        self.horizontalLayout_redobox = QtWidgets.QHBoxLayout()
        self.horizontalLayout_redobox.setObjectName("horizontalLayout_redobox")
        self.pushButton_Redraw = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Redraw.setMinimumSize(QtCore.QSize(0, 35))
        self.pushButton_Redraw.setMaximumSize(QtCore.QSize(110, 35))
        self.pushButton_Redraw.setObjectName("pushButton_Redraw")
        self.horizontalLayout_redobox.addWidget(self.pushButton_Redraw)
        self.pushButton_Range = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_Range.setMinimumSize(QtCore.QSize(0, 35))
        self.pushButton_Range.setMaximumSize(QtCore.QSize(110, 35))
        self.pushButton_Range.setObjectName("pushButton_Range")
        self.horizontalLayout_redobox.addWidget(self.pushButton_Range)
        self.pushButton_refreshAll = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_refreshAll.setMinimumSize(QtCore.QSize(0, 35))
        self.pushButton_refreshAll.setMaximumSize(QtCore.QSize(110, 35))
        self.pushButton_refreshAll.setObjectName("pushButton_refreshAll")
        self.horizontalLayout_redobox.addWidget(self.pushButton_refreshAll)
        self.verticalLayout_menu.addLayout(self.horizontalLayout_redobox)
        self.group_TIRE = QtWidgets.QGroupBox(self.centralwidget)
        self.group_TIRE.setMinimumSize(QtCore.QSize(330, 30))
        self.group_TIRE.setMaximumSize(QtCore.QSize(330, 30))
        self.group_TIRE.setTitle("")
        self.group_TIRE.setObjectName("group_TIRE")
        self.radio_PC = QtWidgets.QRadioButton(self.group_TIRE)
        self.radio_PC.setGeometry(QtCore.QRect(20, 7, 51, 17))
        self.radio_PC.setChecked(True)
        self.radio_PC.setObjectName("radio_PC")
        self.radioTB = QtWidgets.QRadioButton(self.group_TIRE)
        self.radioTB.setGeometry(QtCore.QRect(240, 7, 51, 17))
        self.radioTB.setObjectName("radioTB")
        self.radioLT = QtWidgets.QRadioButton(self.group_TIRE)
        self.radioLT.setGeometry(QtCore.QRect(140, 7, 51, 17))
        self.radioLT.setObjectName("radioLT")
        self.verticalLayout_menu.addWidget(self.group_TIRE)
        self.horizontalLayou_min = QtWidgets.QHBoxLayout()
        self.horizontalLayou_min.setObjectName("horizontalLayou_min")
        self.label_min = QtWidgets.QLabel(self.centralwidget)
        self.label_min.setMaximumSize(QtCore.QSize(60, 25))
        self.label_min.setAlignment(QtCore.Qt.AlignCenter)
        self.label_min.setObjectName("label_min")
        self.horizontalLayou_min.addWidget(self.label_min)
        self.lineEdit_min_colorRange = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_min_colorRange.setMaximumSize(QtCore.QSize(80, 30))
        self.lineEdit_min_colorRange.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_min_colorRange.setObjectName("lineEdit_min_colorRange")
        self.horizontalLayou_min.addWidget(self.lineEdit_min_colorRange)
        self.label_max = QtWidgets.QLabel(self.centralwidget)
        self.label_max.setMaximumSize(QtCore.QSize(60, 25))
        self.label_max.setAlignment(QtCore.Qt.AlignCenter)
        self.label_max.setObjectName("label_max")
        self.horizontalLayou_min.addWidget(self.label_max)
        self.lineEdit_max_colorRange = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_max_colorRange.setMaximumSize(QtCore.QSize(100, 30))
        self.lineEdit_max_colorRange.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_max_colorRange.setObjectName("lineEdit_max_colorRange")
        self.horizontalLayou_min.addWidget(self.lineEdit_max_colorRange)
        self.verticalLayout_menu.addLayout(self.horizontalLayou_min)
        self.horizontalLayout_ptSize = QtWidgets.QHBoxLayout()
        self.horizontalLayout_ptSize.setObjectName("horizontalLayout_ptSize")
        self.push_lateralShift = QtWidgets.QPushButton(self.centralwidget)
        self.push_lateralShift.setMaximumSize(QtCore.QSize(110, 25))
        self.push_lateralShift.setObjectName("push_lateralShift")
        self.horizontalLayout_ptSize.addWidget(self.push_lateralShift)
        self.lineEdit_lateralShift = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_lateralShift.setMaximumSize(QtCore.QSize(50, 25))
        self.lineEdit_lateralShift.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_lateralShift.setObjectName("lineEdit_lateralShift")
        self.horizontalLayout_ptSize.addWidget(self.lineEdit_lateralShift)
        self.pushPointSize = QtWidgets.QPushButton(self.centralwidget)
        self.pushPointSize.setMaximumSize(QtCore.QSize(100, 25))
        self.pushPointSize.setObjectName("pushPointSize")
        self.horizontalLayout_ptSize.addWidget(self.pushPointSize)
        self.lineEdit_pointSize = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_pointSize.setMaximumSize(QtCore.QSize(50, 25))
        self.lineEdit_pointSize.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_pointSize.setObjectName("lineEdit_pointSize")
        self.horizontalLayout_ptSize.addWidget(self.lineEdit_pointSize)
        self.verticalLayout_menu.addLayout(self.horizontalLayout_ptSize)
        self.horizontalLayout_angle = QtWidgets.QHBoxLayout()
        self.horizontalLayout_angle.setObjectName("horizontalLayout_angle")
        self.push_Rotating = QtWidgets.QPushButton(self.centralwidget)
        self.push_Rotating.setMaximumSize(QtCore.QSize(110, 25))
        self.push_Rotating.setObjectName("push_Rotating")
        self.horizontalLayout_angle.addWidget(self.push_Rotating)
        self.lineEdit_rotating = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_rotating.setMaximumSize(QtCore.QSize(50, 25))
        self.lineEdit_rotating.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_rotating.setObjectName("lineEdit_rotating")
        self.horizontalLayout_angle.addWidget(self.lineEdit_rotating)
        self.pushPointsDensity = QtWidgets.QPushButton(self.centralwidget)
        self.pushPointsDensity.setMaximumSize(QtCore.QSize(100, 25))
        self.pushPointsDensity.setObjectName("pushPointsDensity")
        self.horizontalLayout_angle.addWidget(self.pushPointsDensity)
        self.lineEdit_PointsDensity = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_PointsDensity.setMaximumSize(QtCore.QSize(50, 25))
        self.lineEdit_PointsDensity.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_PointsDensity.setObjectName("lineEdit_PointsDensity")
        self.horizontalLayout_angle.addWidget(self.lineEdit_PointsDensity)
        self.verticalLayout_menu.addLayout(self.horizontalLayout_angle)
        self.horizontalLayout_fitting = QtWidgets.QHBoxLayout()
        self.horizontalLayout_fitting.setObjectName("horizontalLayout_fitting")
        self.groupBox_11 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_11.setMaximumSize(QtCore.QSize(180, 25))
        self.groupBox_11.setTitle("")
        self.groupBox_11.setObjectName("groupBox_11")
        self.radio_ISLM_org = QtWidgets.QRadioButton(self.groupBox_11)
        self.radio_ISLM_org.setGeometry(QtCore.QRect(0, 0, 70, 20))
        self.radio_ISLM_org.setMaximumSize(QtCore.QSize(70, 25))
        self.radio_ISLM_org.setObjectName("radio_ISLM_org")
        self.radio_ISLM_cali = QtWidgets.QRadioButton(self.groupBox_11)
        self.radio_ISLM_cali.setGeometry(QtCore.QRect(50, 0, 70, 20))
        self.radio_ISLM_cali.setMaximumSize(QtCore.QSize(70, 25))
        self.radio_ISLM_cali.setObjectName("radio_ISLM_cali")
        self.radio_calculation = QtWidgets.QRadioButton(self.groupBox_11)
        self.radio_calculation.setGeometry(QtCore.QRect(120, 0, 60, 20))
        self.radio_calculation.setMaximumSize(QtCore.QSize(60, 25))
        self.radio_calculation.setObjectName("radio_calculation")
        self.horizontalLayout_fitting.addWidget(self.groupBox_11)
        self.label_fittingOrder = QtWidgets.QLabel(self.centralwidget)
        self.label_fittingOrder.setMaximumSize(QtCore.QSize(50, 25))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.label_fittingOrder.setFont(font)
        self.label_fittingOrder.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_fittingOrder.setObjectName("label_fittingOrder")
        self.horizontalLayout_fitting.addWidget(self.label_fittingOrder)
        self.lineEdit_fittingOrder = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_fittingOrder.setMaximumSize(QtCore.QSize(30, 30))
        self.lineEdit_fittingOrder.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit_fittingOrder.setObjectName("lineEdit_fittingOrder")
        self.horizontalLayout_fitting.addWidget(self.lineEdit_fittingOrder)
        self.check_showFittingPoints = QtWidgets.QCheckBox(self.centralwidget)
        self.check_showFittingPoints.setMaximumSize(QtCore.QSize(50, 25))
        self.check_showFittingPoints.setObjectName("check_showFittingPoints")
        self.horizontalLayout_fitting.addWidget(self.check_showFittingPoints)
        self.verticalLayout_menu.addLayout(self.horizontalLayout_fitting)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setMaximumSize(QtCore.QSize(330, 16777215))
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout_menu.addWidget(self.textBrowser)
        self.verticalLayout_board.addLayout(self.verticalLayout_menu)
        self.horizontalLayout_9.addLayout(self.verticalLayout_board)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1465, 21))
        self.menubar.setObjectName("menubar")
        self.menuFILE = QtWidgets.QMenu(self.menubar)
        self.menuFILE.setObjectName("menuFILE")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionClose = QtWidgets.QAction(MainWindow)
        self.actionClose.setObjectName("actionClose")
        self.actionClear = QtWidgets.QAction(MainWindow)
        self.actionClear.setObjectName("actionClear")
        self.menuFILE.addAction(self.actionClear)
        self.menuFILE.addAction(self.actionClose)
        self.menubar.addAction(self.menuFILE.menuAction())

        self.retranslateUi(MainWindow)
        self.actionClose.triggered.connect(MainWindow.close)
        self.pushButton_Range.clicked.connect(self.lineEdit_min_colorRange.copy)
        self.pushPointSize.clicked.connect(self.lineEdit_pointSize.copy)
        self.pushButton_Range.clicked.connect(self.lineEdit_max_colorRange.copy)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.pushButton_Redraw, self.pushButton_Range)
        MainWindow.setTabOrder(self.pushButton_Range, self.radio_PC)
        MainWindow.setTabOrder(self.radio_PC, self.radioLT)
        MainWindow.setTabOrder(self.radioLT, self.radioTB)
        MainWindow.setTabOrder(self.radioTB, self.lineEdit_min_colorRange)
        MainWindow.setTabOrder(self.lineEdit_min_colorRange, self.lineEdit_max_colorRange)
        MainWindow.setTabOrder(self.lineEdit_max_colorRange, self.lineEdit_lateralShift)
        MainWindow.setTabOrder(self.lineEdit_lateralShift, self.push_lateralShift)
        MainWindow.setTabOrder(self.push_lateralShift, self.lineEdit_rotating)
        MainWindow.setTabOrder(self.lineEdit_rotating, self.push_Rotating)
        MainWindow.setTabOrder(self.push_Rotating, self.lineEdit_pointSize)
        MainWindow.setTabOrder(self.lineEdit_pointSize, self.lineEdit_PointsDensity)
        MainWindow.setTabOrder(self.lineEdit_PointsDensity, self.lineEdit_fittingOrder)
        MainWindow.setTabOrder(self.lineEdit_fittingOrder, self.textBrowser)
        MainWindow.setTabOrder(self.textBrowser, self.check_FTP)
        MainWindow.setTabOrder(self.check_FTP, self.pushPointSize)
        MainWindow.setTabOrder(self.pushPointSize, self.pushPointsDensity)
        MainWindow.setTabOrder(self.pushPointsDensity, self.lineEdit_address)
        MainWindow.setTabOrder(self.lineEdit_address, self.lineEdit_hpc_ID)
        MainWindow.setTabOrder(self.lineEdit_hpc_ID, self.push_connection)
        MainWindow.setTabOrder(self.push_connection, self.radio_Single)
        MainWindow.setTabOrder(self.radio_Single, self.radio_DOE)
        MainWindow.setTabOrder(self.radio_DOE, self.lineEdit_DOE_ID)
        MainWindow.setTabOrder(self.lineEdit_DOE_ID, self.radio_Manual)
        MainWindow.setTabOrder(self.radio_Manual, self.lineEdit_0_Location)
        MainWindow.setTabOrder(self.lineEdit_0_Location, self.lineEdit_1_VT_Number)
        MainWindow.setTabOrder(self.lineEdit_1_VT_Number, self.lineEdit_3_VT_Serial)
        MainWindow.setTabOrder(self.lineEdit_3_VT_Serial, self.lineEdit_2_VT_Revision)
        MainWindow.setTabOrder(self.lineEdit_2_VT_Revision, self.lineEdit_4_Sim_Type)
        MainWindow.setTabOrder(self.lineEdit_4_Sim_Type, self.lineEdit_5_Sim_Num)
        MainWindow.setTabOrder(self.lineEdit_5_Sim_Num, self.lineEdit_jobDir)
        MainWindow.setTabOrder(self.lineEdit_jobDir, self.radioButton_print1)
        MainWindow.setTabOrder(self.radioButton_print1, self.radioButton_print2)
        MainWindow.setTabOrder(self.radioButton_print2, self.radioButton_print3)
        MainWindow.setTabOrder(self.radioButton_print3, self.radioButton_print4)
        MainWindow.setTabOrder(self.radioButton_print4, self.radioButton_print5)
        MainWindow.setTabOrder(self.radioButton_print5, self.radioButton_print6)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SMART-Footprint"))
        self.lineEdit_address.setToolTip(_translate("MainWindow", "<html><head/><body><p>HPC: 10.82.66.65</p></body></html>"))
        self.lineEdit_address.setText(_translate("MainWindow", "10.82.66.65"))
        self.label_ID.setText(_translate("MainWindow", "ID"))
        self.lineEdit_hpc_ID.setToolTip(_translate("MainWindow", "<html><head/><body><p>h+Employee ID </p></body></html>"))
        self.lineEdit_hpc_ID.setText(_translate("MainWindow", "h20200155"))
        self.push_connection.setText(_translate("MainWindow", "Connect"))
        self.check_FTP.setText(_translate("MainWindow", "SFTP"))
        self.radio_Single.setText(_translate("MainWindow", "Single"))
        self.radio_DOE.setText(_translate("MainWindow", "DOE"))
        self.lineEdit_DOE_ID.setToolTip(_translate("MainWindow", "<html><head/><body><p>Auto-Detect</p></body></html>"))
        self.lineEdit_DOE_ID.setText(_translate("MainWindow", "2100000"))
        self.radio_Manual.setText(_translate("MainWindow", "Manual"))
        self.lineEdit_0_Location.setToolTip(_translate("MainWindow", "<html><head/><body><p>RND or ATC or CTC or ETC </p></body></html>"))
        self.lineEdit_0_Location.setText(_translate("MainWindow", "RND"))
        self.lineEdit_1_VT_Number.setToolTip(_translate("MainWindow", "<html><head/><body><p>Separator : /</p><p>ex : 1024000 / 1024365</p></body></html>"))
        self.lineEdit_1_VT_Number.setText(_translate("MainWindow", "1024287"))
        self.lineEdit_3_VT_Serial.setToolTip(_translate("MainWindow", "<html><head/><body><p>Separator : , </p><p>(1, 2 / 13 )</p></body></html>"))
        self.lineEdit_3_VT_Serial.setText(_translate("MainWindow", "371"))
        self.lineEdit_2_VT_Revision.setToolTip(_translate("MainWindow", "<html><head/><body><p>Separator : , or ~</p><p>ex: 1,2 or 1~5</p></body></html>"))
        self.lineEdit_2_VT_Revision.setText(_translate("MainWindow", "0"))
        self.lineEdit_4_Sim_Type.setToolTip(_translate("MainWindow", "<html><head/><body><p>Separator : , </p><p>ex : D101, D104 / D104</p></body></html>"))
        self.lineEdit_4_Sim_Type.setText(_translate("MainWindow", "D101"))
        self.lineEdit_5_Sim_Num.setToolTip(_translate("MainWindow", "<html><head/><body><p>Separator : , </p><p>(ex: 1,2 / 2 )</p></body></html>"))
        self.lineEdit_5_Sim_Num.setText(_translate("MainWindow", "1"))
        self.lineEdit_jobDir.setToolTip(_translate("MainWindow", "<html><head/><body><p>Working Directory (Full path)</p></body></html>"))
        self.lineEdit_jobDir.setText(_translate("MainWindow", "Working Directory"))
        self.lineEdit_smartFile.setToolTip(_translate("MainWindow", "<html><head/><body><p>SMART Input file</p></body></html>"))
        self.lineEdit_smartFile.setText(_translate("MainWindow", "Smart Input"))
        self.push_searchFile.setText(_translate("MainWindow", "Search"))
        self.lineEdit_patternMesh.setToolTip(_translate("MainWindow", "<html><head/><body><p>CUTE 2D mesh or Pattern Mesh (ptn)</p></body></html>"))
        self.lineEdit_patternMesh.setText(_translate("MainWindow", "Mesh 2D or Pattern"))
        self.push_searchMesh.setText(_translate("MainWindow", "Search"))
        self.pushButton_GeneratngFoot.setText(_translate("MainWindow", "Load Footprint (Not Calibrated)"))
        self.filename.setText(_translate("MainWindow", "Connect FTP or Open a file"))
        self.checkBox_6.setText(_translate("MainWindow", "Grid "))
        self.radio_plus0.setText(_translate("MainWindow", "+0"))
        self.radio_plus6.setText(_translate("MainWindow", "+6"))
        self.radio_plus12.setText(_translate("MainWindow", "+12"))
        self.checkBox_showProfile.setText(_translate("MainWindow", "Profile"))
        self.radioButton_print1.setText(_translate("MainWindow", "FP1"))
        self.radioButton_print2.setText(_translate("MainWindow", "FP2"))
        self.radioButton_print3.setText(_translate("MainWindow", "FP3"))
        self.radioButton_print4.setText(_translate("MainWindow", "FP4"))
        self.radioButton_print5.setText(_translate("MainWindow", "FP5"))
        self.radioButton_print6.setText(_translate("MainWindow", "FP6"))
        self.lineEdit_jobFile.setToolTip(_translate("MainWindow", "<html><head/><body><p>Working file </p></body></html>"))
        self.lineEdit_jobFile.setText(_translate("MainWindow", "Working File"))
        self.pushButton_compare.setText(_translate("MainWindow", "Footprint Boundaries"))
        self.checkBox_showGrv.setText(_translate("MainWindow", "Groove"))
        self.checkBox_showBndPressure.setText(_translate("MainWindow", "Pressure"))
        self.pushButton_Redraw.setText(_translate("MainWindow", "Refresh Image"))
        self.pushButton_Range.setText(_translate("MainWindow", "Refresh FPC"))
        self.pushButton_refreshAll.setText(_translate("MainWindow", "Refresh ISLM FPC"))
        self.radio_PC.setText(_translate("MainWindow", "PC"))
        self.radioTB.setText(_translate("MainWindow", "TB"))
        self.radioLT.setText(_translate("MainWindow", "LT"))
        self.label_min.setText(_translate("MainWindow", "Minimum"))
        self.lineEdit_min_colorRange.setText(_translate("MainWindow", "50000"))
        self.label_max.setText(_translate("MainWindow", "Maximum"))
        self.lineEdit_max_colorRange.setText(_translate("MainWindow", "500000"))
        self.push_lateralShift.setText(_translate("MainWindow", "Lateral Shift(mm)"))
        self.lineEdit_lateralShift.setText(_translate("MainWindow", "0"))
        self.pushPointSize.setText(_translate("MainWindow", "Points Size"))
        self.lineEdit_pointSize.setText(_translate("MainWindow", "1"))
        self.push_Rotating.setText(_translate("MainWindow", "Rotate (Degree)"))
        self.lineEdit_rotating.setText(_translate("MainWindow", "2"))
        self.pushPointsDensity.setText(_translate("MainWindow", "Points Density"))
        self.lineEdit_PointsDensity.setText(_translate("MainWindow", "20"))
        self.radio_ISLM_org.setText(_translate("MainWindow", "ORG"))
        self.radio_ISLM_cali.setText(_translate("MainWindow", "Calibrat"))
        self.radio_calculation.setText(_translate("MainWindow", "Calcu."))
        self.label_fittingOrder.setText(_translate("MainWindow", "Fit-Order"))
        self.lineEdit_fittingOrder.setText(_translate("MainWindow", "6"))
        self.check_showFittingPoints.setText(_translate("MainWindow", "PTS"))
        self.menuFILE.setTitle(_translate("MainWindow", "FILE"))
        self.actionClose.setText(_translate("MainWindow", "Quit"))
        self.actionClose.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.actionClear.setText(_translate("MainWindow", "Clear all data"))
        self.actionClear.setToolTip(_translate("MainWindow", "Clear all data"))
        self.actionClear.setShortcut(_translate("MainWindow", "Ctrl+R"))

    def initialze(self): 
        for i in range(self.rows): 
            self.tableWidget.setItem(i, 4, QtWidgets.QTableWidgetItem(self.lineEdit_pointSize.text()))

        self.actions()
        self.initial_variables()
        self.Starting()
        self.jobStatus()
        self.start_log()

        self._stdout = StdoutRedirect()
        self._stdout.start()
        self._stdout.printOccur.connect(lambda x : self._append_text(x))

        self._stdoutText = StdoutRedirectText()
        self._stdoutText.start()
        self._stdoutText.printOccur.connect(lambda x : self._append_textbrower(x))

    def setTable(self): 
        self.columns= 5
        self.rows = 18
        self.tableWidget = QtWidgets.QTableWidget(self.rows, self.columns) # row, column
        self.boxchecked=[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1]
        self.tableWidget.setMaximumSize(QtCore.QSize(330, 16777215))
        self.tableWidget.setHorizontalHeaderLabels(["No.", "Footshape Name", "Color", 'Mark', "Size"])
        self.tableWidget.setColumnWidth(0, 1) 
        self.tableWidget.setColumnWidth(1, 160) 
        self.tableWidget.setColumnWidth(2, 55) 
        self.tableWidget.setColumnWidth(3, 10) 
        self.tableWidget.setColumnWidth(4, 5) 
        height = 7
        for i in range(self.rows): 
            self.tableWidget.setRowHeight(i, height) 

        self.nData = self.rows 
        item = MyQTableWidgetItemCheckBox()
        self.chbox = []
        self.combo_color=[]
        self.combo_mark=[]
        for i in range(self.rows): 
            if i ==0: self.tableWidget.setItem(i, 0, item)
            self.chbox.append( MyCheckBox(item) )
            self.tableWidget.setCellWidget(i, 0, self.chbox[i])

            self.combo_color.append(QtWidgets.QComboBox())
            self.combo_color[i].addItems(colors)
            self.combo_color[i].setCurrentIndex(i)
            self.tableWidget.setCellWidget(i, 2, self.combo_color[i])

            self.combo_mark.append(QtWidgets.QComboBox())
            self.combo_mark[i].addItems(mark)
            self.combo_mark[i].setCurrentIndex(0)
            self.tableWidget.setCellWidget(i, 3, self.combo_mark[i])

            self.chbox[i].stateChanged.connect(self.addComparingBoundary_check)


    def start_log(self): 
        self.log='footprint.log'
        logf = open(self.log, 'w')
        logf.close()
    def add_log(self, text): 
        logf = open(self.log, 'a')
        logf.writelines(text)
        logf.close()

    def getRevisions(self, strRevision): 
        revisions =[]
        revs = strRevision.split(",")
        for rev in revs: 
            if '~' in rev: 
                rv = rev.split("~")
                rev1 = int(rv[0].strip())
                rev2 = int(rv[1].strip())
                trev = range(rev1, rev2+1)
                for rv in list(trev): 
                    revisions.append(str(rv))
            else: 
                revisions.append(rev.strip())

        return revisions 

    def checkDOE(self, loc, strVT, strVtNum, strRevision, strSimType, strSimNum): 
        
        revisions=self.getRevisions(strRevision)
        rev = revisions[0]

        VTs = strVT.split("/") ##  material code 
        m_code = VTs[0].strip()
        VtNums = strVtNum.split("/")[0]   ## virtual tire serial 
        vtNum = VtNums.split(",")[0].strip().zfill(5)

        vtCode = m_code+'VT'+ vtNum+"-"+str(rev)

        jobDir =  '/home/users/fiper/ISLM/ISLM_JobFolder/'+loc+"/" +m_code+'/'
        if isfile(jobDir) :
            dirList =self.sftp.listdir(jobDir)
        else: 
            
            return False 
        for lst in dirList: 
            if "DOE" in lst : 
                subList = self.sftp.listdir(jobDir+lst+"/")
                for sb in subList: 
                    if sb == vtCode: 
                        return lst
        else: 
            return False  
            

        fname = makingFullFilePath_linux(wd, name)

    def checkInput_ISLM(self, lst_strings): 
        for string in lst_strings: 
            if '.' in string: 
                print ("Wrong Input: %s"%(string))
                return False 
            if '`' in string: 
                print ("Wrong Input: %s"%(string))
                return False
        if not 'D101' in lst_strings[4] and not 'D104' in lst_strings[4]: 
            print ("Wrong Simulation type: %s (D101 or D104)"%(string))
            return False 

        return True 
            

    def _append_text(self, msg): 
        logf = open(self.log, 'a')
        logf.write("%s"%(msg))
        logf.close()
    def _append_textbrower(self, msg): 
        self.textBrowser.moveCursor(QtGui.QTextCursor.End)
        self.textBrowser.insertPlainText(msg)
        QtWidgets.QApplication.processEvents(QtCore.QEventLoop.ExcludeUserInputEvents)

    def actions(self): 
        self.radio_Single.clicked.connect(self.jobStatus)
        self.radio_DOE.clicked.connect(self.jobStatus)
        self.radio_Manual.clicked.connect(self.jobStatus)
        
        self.pushButton_GeneratngFoot.clicked.connect(self.loadImage)
        self.pushButton_Redraw.clicked.connect(self.redrawing)
        self.check_showFittingPoints.stateChanged.connect(self.viewRefPoints)

        self.push_Rotating.clicked.connect(self.reCalculatingFPC)
        self.push_lateralShift.clicked.connect(self.reCalculatingFPC)
        self.pushButton_Range.clicked.connect(self.reCalculatingFPC)

        self.lineEdit_DOE_ID.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_0_Location.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_1_VT_Number.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_3_VT_Serial.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_2_VT_Revision.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_4_Sim_Type.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_5_Sim_Num.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_jobDir.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_jobFile.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_patternMesh.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_smartFile.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_min_colorRange.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_max_colorRange.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_pointSize.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_PointsDensity.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_address.editingFinished.connect(self.writeSettingValueChange)
        self.lineEdit_hpc_ID.editingFinished.connect(self.idInput)

        self.radio_PC.clicked.connect(self.writeSettingValueChange)
        self.radioTB.clicked.connect(self.writeSettingValueChange)
        self.radio_Single.clicked.connect(self.writeSettingValueChange)
        self.radio_DOE.clicked.connect(self.writeSettingValueChange)
        self.radio_Manual.clicked.connect(self.writeSettingValueChange)

        self.radioButton_print1.clicked.connect(self.changeFootprint)
        self.radioButton_print2.clicked.connect(self.changeFootprint)
        self.radioButton_print3.clicked.connect(self.changeFootprint)
        self.radioButton_print4.clicked.connect(self.changeFootprint)
        self.radioButton_print5.clicked.connect(self.changeFootprint)
        self.radioButton_print6.clicked.connect(self.changeFootprint)

        self.radio_PC.clicked.connect(self.setColorRange)
        self.radioTB.clicked.connect(self.setColorRange)
        self.radioLT.clicked.connect(self.setColorRange)

        self.check_FTP.setDisabled(True)
        self.push_connection.clicked.connect(self.connectFTP)
        
        self.radio_ISLM_org.clicked.connect(self.printFPC)
        self.radio_ISLM_org.clicked.connect(self.checkView)
        self.radio_ISLM_cali.clicked.connect(self.printFPC)
        self.radio_ISLM_cali.clicked.connect(self.checkView)
        self.radio_calculation.clicked.connect(self.printFPC)
        self.radio_calculation.clicked.connect(self.checkView)

        self.actionClear.triggered.connect(self.windowClear)

        self.pushButton_compare.clicked.connect(self.addComparingBoundary)
        self.checkBox_showGrv.stateChanged.connect(self.addComparingBoundary_check)
        self.checkBox_showBndPressure.stateChanged.connect(self.addComparingBoundary_check)

        self.checkBox_6.clicked.connect(self.displayAllprints)
        self.checkBox_showProfile.clicked.connect(self.checkView) 

        self.radio_plus0.clicked.connect(self.rangeFootprints)
        self.radio_plus6.clicked.connect(self.rangeFootprints)
        self.radio_plus12.clicked.connect(self.rangeFootprints)

        self.push_searchFile.clicked.connect(self.searchSMARTFile)
        self.push_searchMesh.clicked.connect(self.searchMESHFile)

    def searchSMARTFile(self): 
        # dlg = TREEWIDGET(extensions=['.inp'])
        if self.connectionStatus: 
            Dialog = QtWidgets.QDialog()
            dlg = tree_widget.Ui_Dialog()
            extens=['.inp', '.odb']
            dlg.setupUi(Dialog, sftp=[self.host, self.user, self.pw], extensions=extens)
            Dialog.exec_()
            try: 
                with open('filename_path') as F: 
                    path = F.readlines()
                self.lineEdit_jobDir.setText(path[0])
                self.lineEdit_smartFile.setText(path[1])
            except: 
                self.lineEdit_jobDir.setText("")
                self.lineEdit_smartFile.setText("")
            
            fp = open('filename_path', 'w')
            fp.close()

            
    def searchMESHFile(self): 
        if self.connectionStatus: 
            Dialog = QtWidgets.QDialog()
            dlg = tree_widget.Ui_Dialog()
            extens=['.inp', '.ptn']
            dlg.setupUi(Dialog, sftp=[self.host, self.user, self.pw], extensions=extens)
            Dialog.exec_()
            try: 
                with open('filename_path') as F: 
                    path = F.readlines()
                
                self.lineEdit_patternMesh.setText(path[0].strip()+"/"+path[1].strip()+", CONT, 3")
            except: 
                self.lineEdit_patternMesh.setText(", CONT, 3")
            # fp = open('filename_path', 'w')
            # fp.close()


    def rangeFootprints(self): 
        if self.fn: 
            if self.radio_plus0.isChecked(): maxfn = self.fn+1
            if self.radio_plus6.isChecked(): maxfn = self.fn - 5 
            if self.radio_plus12.isChecked(): maxfn = self.fn - 11 

            # self.filename.setText(str(maxfn)+" max. fn " + " foots=%d"%(self.fn))
            for i in range(6): 
                self.current[i].setChecked(False)
                if i < maxfn : 
                    self.current[i].setEnabled(True)
                else: 
                    self.current[i].setEnabled(False)

            # for i in range(self.FN): 
            #     if i <=self.fn : 
            #         self.checkboxes[i].setEnabled(True)
            #         self.checkboxes[i].setChecked(True)
            #     else: 
            #         self.checkboxes[i].setEnabled(False)
            #         self.checkboxes[i].setChecked(False)
      
    def checkAllboundaries(self, check): 
        for i in range(self.fn): 
            self.chbox[i].setChecked(check)
    
    def windowClear(self): 
        self.Starting()

        self.comparings=[]
        self.px=[]; self.py=[];  self.pv=[]
        self.ActualArea = 0 
        self.angle = 0
        self.vmin = 0 
        self.vmax = 0 
        self.size = 0.3 
        
        self.cwd = getcwd()
        self.smart=None
        self.ptn = None
        self.mesh = None 
        
        self.fn = -1 
        for i in range(self.FN): 
            self.chbox[i].setChecked(False)
            self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(""))

        self.radioButton_print1.setChecked(True)
        self.figure.clearWindow()

        self.loadedVT = ['\n\n FP1: \n\n']
        for i in range(1, self.FN): 
            self.loadedVT.append(" FP%d: \n\n"%(i+1))

        self.foots = []
        for i in range(self.FN): 
            self.foots.append(FOOTPRINT())

        txt = "* Total   Contact Area\n* Actual Contact Area\n* Roundness\n"
        txt += '\n* Length Position    15%,    25%,    50%,   75%,    85%\n'
        txt += "  Contact Length :\n"
        txt += "  Contact   Width :\n"
        txt += "\n* Square(Contact) Ratio \n \n"
        txt += "\n* Global Gullwing shape =      \n* Local Gullwing Shape  = \n"
        txt +=   "* Roundness Shape       =      \n* Squareness Shape      =  \n"

        for text in self.loadedVT: 
            txt += text 

        txt += self.terms

        self.textBrowser.setText(txt)

        self.filename.setText("Initialized")
        print ("## Initialized #############################")
        
    def initial_variables(self):
         
        self.comparings=[]
        self.px=[]; self.py=[];  self.pv=[]
        self.ActualArea = 0 
        self.angle = 0
        self.vmin = 0 
        self.vmax = 0 
        self.size = 0.3 
        self.cwd = getcwd()
        self.smart=None
        self.ptn = None
        self.mesh = None 
        self.FN = 18 
        self.fn = -1 
        self.foots = []
        self.current =[]
        self.checkboxes=[]
        self.connectionStatus = False 
        self.boundaryplotting = False 

        self.skip_text = False 

        self.localSMART = 'local_SMART.inp' 
        self.localMesh = 'local_2dMesh.inp'
        self.localDat = 'local-postfoot.dat'
        self.localSfric = 'local_sfric.sfric'
        self.localSfricResult = 'local_sfricResult.sfric010'
        self.localPtn = 'local.ptn' 
        self.localAxi= 'localAxi.axi'
        self.localISLMPoints = 'localISLMPoints.dat'
        self.localISLMFPC = "ISLM_FPC_Original.txt"
        self.localDeformed = 'DeformedShape.inp'
        self.localContour = 'localFootContour.dat'
        self.localODB_CPress='cpress.txt'
        self.localODB = 'remote.odb'
        self.localODB_dat = 'dat_ODB.dat'
        
        self.localISLMCaliPoints = 'localISLMCaliPoints.dat'
        self.localISLMCaliFPC = "ISLM_FPC_Cali.txt"
        self.localCaliContour = 'localFootCaliContour.dat'

        self.loadedVT = ['\n\n FP1: \n\n']
        for i in range(1, self.FN): 
            self.loadedVT.append(" FP%d: \n\n"%(i+1))

        self.terms = '\n\n'
        self.terms += '*Roundness \n = Total contact area / (Max Length * Max Width)\n'
        self.terms += '*Gullwing Global shape factor \n = 1 - Max footprint ratio(75~95%)\n'
        self.terms += '*Footprint ratio = contact length / center length\n'
        self.terms += '*Gullwing Local Shape factor\n  = Average Slope of shoulder Rib Leading Edge\n'
        self.terms += ' range 75%~95%'
        self.terms += '*Roundness Shape factor\n  = 2nd order term of 2nd order Polynomial Fit\n   for center 50%\n'
        self.terms += '*Squareness Shape factor\n  = Max. Length / Max. Width\n'

        self.skippedVT=[]

        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("favicon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)

        self.connectionStatus= False 

        self.figure = myCanvas()
        self.canvas = self.figure.canvas
        self.toolbar = self.figure.toolbar 
        self.verticalLayout_image.addWidget(self.toolbar)
        self.verticalLayout_image.addWidget(self.canvas)

        self.default_user = False 

    def currentFootprintNumber(self): 
        if self.radioButton_print1.isChecked(): fn = 0 
        elif self.radioButton_print2.isChecked(): fn = 1 
        elif self.radioButton_print3.isChecked(): fn = 2 
        elif self.radioButton_print4.isChecked(): fn = 3 
        elif self.radioButton_print5.isChecked(): fn = 4 
        else: fn = 5 

        if self.radio_plus6.isChecked(): 
            fn += 6
        elif self.radio_plus12.isChecked(): 
            fn += 12

        return fn 

    def connectFTP(self): 
        host = self.lineEdit_address.text().strip()
        pw = user = self.lineEdit_hpc_ID.text().strip()
        if ':' in user: 
            wd = user.split(":")
            user = wd[0].strip()
            pw = wd[1].strip()
        
        if not self.connectionStatus: 
            if ":" in host: 
                ips = host.split(":")
                host = ips[0].strip()
                port = int(ips[1].strip())
            else: 
                port =22

            # if len(user) != 9 : 
            #     self.filename.setText("Input correct user ID.")
            #     return 

            cnt = 0 
            for h in host: 
                if '.' == h: cnt += 1
            if cnt != 3: 
                self.filename.setText("Input correct Address")
                return 
            
            print ("Connecting to %s, port=%d, ID=%s"%(host, port, user), end= ", ")
            self.host = host; self.user=user; self.pw = pw 
            self.ftp = FTP.SSHClient()
            self.ftp.set_missing_host_key_policy(FTP.AutoAddPolicy())
            try:
                self.ftp.connect(host, username=user, password=pw, port=port, timeout=3)
                self.default_user = False 
                self.group_SimulationType.setEnabled(True)
                self.push_connection.setText("Disconnect")
                self.check_FTP.setChecked(True)
                print ("Success!!")

                self.connectionStatus = True
                self.filename.setText(" Opening sftp.")
                self.sftp = self.ftp.open_sftp()
                self.filename.setText("Connected!!")
                self.radio_Manual.setDisabled(False)

            except: 
                host = '10.82.66.65'
                user = 'h20200155'
                pw = user 
                self.lineEdit_hpc_ID.setText("ISLM_User")
                self.lineEdit_address.setText("10.82.66.65")
                self.lineEdit_address.setDisabled(True)
                try: 
                    self.ftp.connect(host, username=user, password=pw, port=port, timeout=3)
                    self.group_SimulationType.setEnabled(True)
                    self.push_connection.setText("Disconnect")
                    self.check_FTP.setChecked(True)
                    print ("Success!!")
                    self.default_user = True 

                    self.connectionStatus = True
                    self.filename.setText(" Opening sftp.")
                    self.sftp = self.ftp.open_sftp()
                    self.filename.setText("Connected!!")
                    self.radio_Manual.setDisabled(True)

                except Exception as EX: 
                    self.connectionStatus = False 
                    self.push_connection.setText("Connect")
                    self.filename.setText(str(EX))
                    self.check_FTP.setChecked(False)
                    print (EX)

        else: 
            self.ftp.close()
            self.check_FTP.setChecked(False)
            self.connectionStatus = False 
            self.push_connection.setText("Connect")
            self.group_SimulationType.setEnabled(False)
            self.filename.setText("Disconnected!!")
            
            print ("Disconnecting SFTP!")
        
        self.jobStatus()

    
    def addComparingBoundary_check(self):
        if self.boundaryplotting : 
            
            boundaries =[]
            grooves =[]
            files =[]
            items = []
            pressures =[]
            colors = []; marks=[]; sizes=[]
            for i in range(self.fn+1): 
                if self.chbox[i].isChecked(): 
                    if not self.foots[i].ISLM_boundary_Init : 
                         boundaries.append(self.foots[i].boundary)
                    elif self.radio_ISLM_org.isChecked() and self.foots[i].ISLM_boundary_Init: 
                        boundaries.append(self.foots[i].ISLM_boundary_Init)

                    elif self.radio_ISLM_cali.isChecked() and self.foots[i].ISLM_caliboundary_Init : 
                        boundaries.append(self.foots[i].ISLM_caliboundary_Init)
                    elif  self.radio_ISLM_cali.isChecked() and not self.foots[i].ISLM_caliboundary_Init :
                        boundaries.append(self.foots[i].ISLM_boundary_Init)
                    else: 
                        boundaries.append(self.foots[i].boundary)

                    grooves.append(self.foots[i].edge_groove)
                    name = self.foots[i].workingfile.split("/")[-1]
                    if name[-12:] == 'postfoot.dat': name = name[:-13]
                    files.append(name)
                    items.append(i)
                    colors.append(self.combo_color[i].currentText())
                    marks.append(self.combo_mark[i].currentText())
                    sizes.append(float(self.tableWidget.item(i, 4).text().strip()))
                    
                    if self.radio_calculation.isChecked(): 
                        pressures.append([self.foots[i].px, self.foots[i].py, self.foots[i].pv])
                    else: 
                        pressures.append([self.foots[i].ISLM_contourX, self.foots[i].ISLM_contourY, self.foots[i].ISLM_contourV])


            if not len(boundaries): 
                self.figure.clearWindow()
                return 
            if self.checkBox_showGrv.isChecked(): 
                if self.checkBox_showBndPressure.isChecked(): 
                    self.figure.plotComparing(boundaries, legends=files, 
                    items=items, size=float(self.lineEdit_pointSize.text()), grv=grooves, pressure=pressures, 
                    colors=colors, marks=marks, sizes=sizes)
                else: 
                    self.figure.plotComparing(boundaries, legends=files, items=items, size=float(self.lineEdit_pointSize.text()),
                    grv=grooves, pressure=None,  colors=colors, marks=marks, sizes=sizes)

            else: 
                if self.checkBox_showBndPressure.isChecked(): 
                    self.figure.plotComparing(boundaries, legends=files, items=items, size=float(self.lineEdit_pointSize.text()), grv=None,
                     pressure=pressures, colors=colors, marks=marks, sizes=sizes)
                else: 
                    self.figure.plotComparing(boundaries, legends=files, items=items, size=float(self.lineEdit_pointSize.text()), grv=None, 
                    pressure=None, colors=colors, marks=marks, sizes=sizes)
            self.filename.setText("Boundaries plotted")
            self.checkBox_6.setChecked(False)
            if self.check_showFittingPoints.isChecked(): 
                self.viewRefPoints()
        
    def setColorRange(self): 
        if self.radio_PC.isChecked(): 
            self.lineEdit_min_colorRange.setText("50000")
            self.lineEdit_max_colorRange.setText("500000")
        elif self.radioLT.isChecked(): 
            self.lineEdit_min_colorRange.setText("50000")
            self.lineEdit_max_colorRange.setText("800000")
        else: 
            self.lineEdit_min_colorRange.setText("100000")
            self.lineEdit_max_colorRange.setText("1000000")

    def writeSettingValueChange(self): 
        self.writeSetting(default=False)

    def removeLocalFiles(self): 
        if isfile(self.localSMART):  remove(self.localSMART)
        if isfile(self.localMesh):  remove(self.localMesh)
        if isfile(self.localDat):  remove(self.localDat)
        if isfile(self.localSfric):  remove(self.localSfric)
        if isfile(self.localSfricResult):  remove(self.localSfricResult)
        if isfile(self.localPtn):  remove(self.localPtn)
        if isfile(self.localAxi):  remove(self.localAxi)
        if isfile(self.localISLMPoints):  remove(self.localISLMPoints)
        if isfile(self.localISLMFPC):  remove(self.localISLMFPC)
        if isfile(self.localDeformed):  remove(self.localDeformed)
        if isfile(self.localContour):  remove(self.localContour)

        if isfile(self.localCaliContour):  remove(self.localCaliContour)
        if isfile(self.localISLMCaliFPC):  remove(self.localISLMCaliFPC)
        if isfile(self.localISLMCaliPoints):  remove(self.localISLMCaliPoints)

        if isfile("topsurf.tmp"):  remove("topsurf.tmp")
        if isfile('shift.tmp'):  remove('shift.tmp')
        if isfile('outer.tmp'):  remove('outer.tmp')

        if isfile('belt.tmp'):  remove('belt.tmp')
        if isfile('bead.tmp'):  remove('bead.tmp')
        if isfile('carcass.tmp'):  remove('carcass.tmp')
        if isfile('deformed.tmp'):  remove('deformed.tmp')

        if isfile('abq'):  remove('abq')
        if isfile( self.localODB):  remove(self.localODB)
        if isfile(self.localODB_CPress):  remove(self.localODB_CPress)
        if isfile(self.localODB_dat): remove(self.localODB_dat)

        

        # if isfile():  remove()

    def isDOE(self, loc, VT, vNum, Rev): 

        m_code = VT.strip()
        vtCode = m_code+'VT'+ vNum.zfill(5)+"-"+str(Rev)
        
        jobDir =  '/home/users/fiper/ISLM/ISLM_JobFolder/'+loc+"/" +m_code 
        print ("** %s"%(jobDir))
        try: 
            dirList =self.sftp.listdir(jobDir)
        except Exception as E: 
            print (E)
            return False 
        
        for lst in dirList: 
            if "DOE" in lst : 
                subList = self.sftp.listdir(jobDir+"/"+lst+"/")
                for sb in subList: 
                    if sb == vtCode: 
                        return lst

        return False 
        
    ################################################
    ## show images  
    ################################################
    def loadImage(self):

        self.filename.setText("Image is loading")
        self.lineEdit_rotating.setText('0')
        N_start = self.fn 
        if self.connectionStatus and not self.radio_Manual.isChecked(): 
            self.radio_ISLM_org.setChecked(True)
            strVT = self.lineEdit_1_VT_Number.text()
            strVtNum = self.lineEdit_3_VT_Serial.text()
            strRevision = self.lineEdit_2_VT_Revision.text()
            strSimType = self.lineEdit_4_Sim_Type.text()
            strSimNum = self.lineEdit_5_Sim_Num.text()

            sims = simulationCodes(strVT, strVtNum, strRevision, strSimType, strSimNum)

            self.skippedVT=[]
            
            for sim in sims: 
                
                DOE_Number = self.isDOE(self.lineEdit_0_Location.text(), sim[0], sim[1], sim[2])

                if DOE_Number: 
                    self.lineEdit_DOE_ID.setText(DOE_Number[3:])
                    self.radio_DOE.setChecked(True)
                    self.lineEdit_5_Sim_Num.setText("1")
                    # strSimNum = '1'
                    # sim[4] = '1'
                    self.filename.setText("CHECK THE SIMULATION SERIAL No.")
                else: 
                    self.radio_Single.setChecked(True)
                    self.lineEdit_2_VT_Revision.setText("0")
                    self.filename.setText("CHECK THE MODEL REVISION No.")
                    # strRevision = '0'
                    # sim[2] = '0' 

                self.lineEdit_1_VT_Number.setText(sim[0])
                self.lineEdit_3_VT_Serial.setText(sim[1])
                self.lineEdit_2_VT_Revision.setText(sim[2])
                self.lineEdit_4_Sim_Type.setText(sim[3])
                self.lineEdit_5_Sim_Num.setText(sim[4])

                inputs=[self.lineEdit_0_Location.text(), sim[0], sim[1], sim[2], sim[3], sim[4]]

                if not self.checkInput_ISLM(inputs): 
                    self.skippedVT.append("%s-%sVT%5s-%s-%s-%4s"%(self.lineEdit_0_Location.text().strip(),\
                        self.lineEdit_1_VT_Number.text(),self.lineEdit_3_VT_Serial.text().zfill(5),self.lineEdit_2_VT_Revision.text(),\
                             self.lineEdit_4_Sim_Type.text(), self.lineEdit_5_Sim_Num.text().zfill(4)))
                    continue 

                print ("**********************************************")
                print (" Loading : %s-%sVT%5s-%s-%s-%4s"%(self.lineEdit_0_Location.text().strip(),\
                        self.lineEdit_1_VT_Number.text(),self.lineEdit_3_VT_Serial.text().zfill(5),self.lineEdit_2_VT_Revision.text(),\
                             self.lineEdit_4_Sim_Type.text(), self.lineEdit_5_Sim_Num.text().zfill(4)))
                print ("**********************************************")
                
                self.loading()
                self.add_log(self.textBrowser.toPlainText())

                if self.fn > self.FN: 
                    self.filename.setText(" %d footprints were loaded.(Erase All : Ctrl+Q)"%(self.FN))
                    break 

            self.lineEdit_1_VT_Number.setText(strVT.strip())
            self.lineEdit_2_VT_Revision.setText(strRevision.strip())
            self.lineEdit_3_VT_Serial.setText(strVtNum.strip())
            self.lineEdit_4_Sim_Type.setText(strSimType)
            self.lineEdit_5_Sim_Num.setText(strSimNum.strip())
            self.writeSetting()
        elif self.connectionStatus and self.radio_Manual.isChecked():
            if ".odb" in self.lineEdit_smartFile.text(): 
                self.textBrowser.clear()
                # self.filename.setText("Loading Image")
                # print ("Start to load image")
                self.loading()
            else: 
                self.loading()
            self.add_log(self.textBrowser.toPlainText())
            
        else: 
            
            self.loading()
            self.add_log(self.textBrowser.toPlainText())

        
        self.plottingStatus(boundary=False)
        if len(self.foots[self.fn].xs): 
            self.printFPC()

        self.checkBox_6.setChecked(False)
        self.check_showFittingPoints.setEnabled(True)
        self.check_showFittingPoints.setChecked(False)

        if self.radio_Manual.isChecked(): 
            self.radio_calculation.setChecked(True)

        self.checkView()
        self.radio_ISLM_cali.setEnabled(False)

        
        if N_start == self.fn: 
            self.filename.setText("No image is loaded!")

    def redrawing(self): 
        if self.checkBox_6.isChecked(): 
            self.displayAllprints()
            return 
        fn = self.currentFootprintNumber()
        
        self.vmin = float(self.lineEdit_min_colorRange.text())
        self.vmax = float(self.lineEdit_max_colorRange.text())
        self.size = float(self.lineEdit_pointSize.text())
        self.angle = float(self.lineEdit_rotating.text())
        self.lateralShift = float(self.lineEdit_lateralShift.text())/1000.0
        if not self.foots[fn].actualArea: 
            return 
        ixs = np.where(self.foots[fn].pv>self.vmin)[0]

        self.foots[fn].xs, self.foots[fn].ys, self.foots[fn].vs = \
                self.rePosition(self.foots[fn], vmin=self.vmin, angle=self.angle, shift=self.lateralShift)


        if self.boundaryplotting: 
            self.addComparingBoundary()

        else:
            if self.foots[fn].ISLM and self.radio_ISLM_org.isChecked(): 
                idx = np.where(self.foots[fn].ISLM_contourV>=self.foots[fn].vmin)[0]
                self.figure.Plotting(self.foots[fn].ISLM_contourX[idx], self.foots[fn].ISLM_contourY[idx],\
                     self.foots[fn].ISLM_contourV[idx], vmin=self.foots[fn].vmin, vmax=self.foots[fn].vmax, \
                         size=self.size, contour=True)
            else: 
                self.figure.Plotting(self.foots[fn].xs, self.foots[fn].ys, self.foots[fn].vs, vmin=self.vmin, vmax=self.vmax, size=self.size)
                self.radio_calculation.setChecked(True)
            self.check_showFittingPoints.setChecked(False)

        self.filename.setText("Image was refreshed")

    def viewRefPoints(self): 
        self.checkBox_6.setChecked(False)
        fn = self.currentFootprintNumber()

        if not self.boundaryplotting: 
            if self.foots[fn].ISLM_caliFPC: 
                self.radio_ISLM_cali.setEnabled(True)
            else: 
                self.radio_ISLM_cali.setEnabled(False)

        if not self.check_showFittingPoints.isChecked(): 
            self.radio_ISLM_cali.setEnabled(False)
            if self.radio_ISLM_cali.isChecked(): 
                self.radio_ISLM_org.setChecked(True)

        if self.check_showFittingPoints.isChecked(): 
            if self.radio_ISLM_org.isChecked(): 
                self.figure.addPoints(self.foots[fn].ISLM_boundary_Init, lw=0, size=1.0)
            elif self.radio_ISLM_cali.isChecked(): 
                self.figure.addPoints(self.foots[fn].ISLM_caliboundary_Init, lw=0, size=1.0)
            else: 
                self.figure.addPoints(self.foots[fn].areaPoints,  self.foots[fn].FPClines)
        else: 
            try: 
                self.figure.removePoints()
            except: 
                pass 
    
    def addComparingBoundary(self):
        self.boundaryplotting = True 
        self.plottingStatus(boundary=self.boundaryplotting)
        self.addComparingBoundary_check()  ## plotting 
        self.check_showFittingPoints.setChecked(False)
        self.check_showFittingPoints.setEnabled(True)
        self.radio_ISLM_cali.setEnabled(True)
        
    def plottingStatus(self, boundary=False): 
        if boundary  : 
            self.boundaryplotting = True
            self.lineEdit_lateralShift.setDisabled(True)
            self.lineEdit_rotating.setDisabled(True)
            self.lineEdit_PointsDensity.setDisabled(True)
        else: 
            self.boundaryplotting = False 
            self.lineEdit_lateralShift.setEnabled(True)
            self.lineEdit_rotating.setEnabled(True)
            self.lineEdit_PointsDensity.setEnabled(True)

        if not self.radio_calculation.isChecked(): 
            self.lineEdit_lateralShift.setDisabled(True)
            self.lineEdit_rotating.setDisabled(True)
            self.lineEdit_PointsDensity.setDisabled(True)


    def loading(self):
        self.comparings=[]
        self.removeLocalFiles()

        self.fn += 1 
        if self.fn >= self.FN: 
            self.fn -= self.FN 

        # self.textBrowser.clear()
        print ("######################################")
        print ("## Loading Footprint %d"%(self.fn+1))
        print ("######################################")
        
        self.foots[self.fn].ISLM_FPC  =None

        if self.connectionStatus: 
            if self.radio_Manual.isChecked(): self.radio_calculation.setChecked(True)

            if ".odb" in self.lineEdit_smartFile.text() and self.radio_Manual.isChecked():
                
                try:  
                    self.abaqusFootdata("")
                except Exception as EX: 
                    print (EX)
                    self.filename.setText( "FILE ERROR" )
                    self.fn -= 1
                    return 

                simulationID =  self.lineEdit_smartFile.text().strip()
                jobFile =  self.lineEdit_smartFile.text().strip()
            else: 
                jobFile, simulationID, workingDirectory = self.getting_onLine_Filenames(manual=self.radio_Manual.isChecked())
                if not jobFile: 
                    print ("No such file")
                    print (jobFile)
                    self.filename.setText( "# FILE ERROR" )
                    # self.filename.setText("No such file! Check Simulation ID")
                    self.fn -= 1
                    return 
                
            self.filename.setText( simulationID )
        else: 
            self.radio_calculation.setChecked(True)
            jobFile, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select File", self.cwd, "File Open(*.sfric0* *.dat, *.odb)")
            if jobFile: 
                self.cwd = getCWD(jobFile)
            else: 
                self.filename.setText("No such file! Check Simulation File")
                self.fn -= 1
                return 

            if ".odb" in jobFile: 
                reading = self.abaqusFootdata("", odb=jobFile)
                if not reading : 
                    print ("File ERROR")
                    self.filename.setText( "* FILE ERROR" )
                    self.fn -= 1
                    return 
                

        self.writeSetting()
        
        self.vmin = float(self.lineEdit_min_colorRange.text())
        self.vmax = float(self.lineEdit_max_colorRange.text())
        self.size = float(self.lineEdit_pointSize.text())
        self.density = int(self.lineEdit_PointsDensity.text())
        self.angle = 0 # float(self.lineEdit_rotating.text())
        self.lateralShift = 0.0 # float(self.lineEdit_lateralShift.text())/1000.0
        self.lineEdit_rotating.setText(str(self.angle))
        self.lineEdit_lateralShift.setText(str(self.lateralShift*1000))
        self.cmap = 'rainbow'

        
        if self.connectionStatus: 
            fname = simulationID
        else: 
            fname = jobFile.split("/")[-1].strip()
            
        self.foots[self.fn].inputBoardValues(vmin=self.vmin, vmax=self.vmax, \
            density=self.density, angle=self.angle, \
            shift=self.lateralShift, file=fname, group='')
        
        self.foots[self.fn].workingfile = jobFile 
        # addings = None 
        if jobFile: 
            self.filename.setText("Generating footprint")
            if '-postfoot.dat' in  jobFile or '.dat' in jobFile:
                if self.connectionStatus:  
                    self.mesh = self.localMesh
                    self.smart = self.localSMART
                    self.ptn = self.localPtn
                    self.workingFile = self.localDat
                else: 
                    self.mesh = None
                    self.smart = None
                    self.workingFile = jobFile
                    
                self.foots[self.fn].sfric = False 
                self.lineEdit_jobFile.setText(jobFile.split("/")[-1]) 

                if isfile(self.localContour): 
                    with open(self.localContour) as F: 
                        lines = F.readlines()
                    for line in lines: 
                        wd = line.split(",") 
                        self.foots[self.fn].ISLM_contourX.append(float(wd[1].strip()))
                        self.foots[self.fn].ISLM_contourY.append(float(wd[0].strip()))
                        self.foots[self.fn].ISLM_contourV.append(float(wd[2].strip()))
                    self.foots[self.fn].ISLM = True 

                    self.foots[self.fn].ISLM_contourX = np.array(self.foots[self.fn].ISLM_contourX)
                    self.foots[self.fn].ISLM_contourY = np.array(self.foots[self.fn].ISLM_contourY)
                    self.foots[self.fn].ISLM_contourV = np.array(self.foots[self.fn].ISLM_contourV)

                    self.foots[self.fn].ISLM_centerPress = contPress(self.foots[self.fn].ISLM_contourX, \
                                                                    self.foots[self.fn].ISLM_contourY,\
                                                                    self.foots[self.fn].ISLM_contourV,\
                                                                    vmin=self.vmin, displim=0.25, savefile=None)


                self.foots[self.fn].nodes, self.foots[self.fn].surfaces, self.foots[self.fn].offset, \
                    self.foots[self.fn].initial_shift, self.foots[self.fn].edge_groove = readDAT(self.workingFile.strip())
                
                if not len(self.foots[self.fn].nodes): 
                    self.filename.setText("No footprint data")
                    print ("No footprint data")
                    self.fn -= 1
                    return 

                print ("* [DAT] lateral shift from DAT=%.2f "%(self.foots[self.fn].initial_shift*1000))
                self.px, self.py, self.pv, self.ActualArea, shift, surf_values = self.datFootprint(\
                     mesh=self.mesh, ptn=self.ptn, smart=self.smart, angle=self.angle, shift=self.foots[self.fn].initial_shift, \
                         offset=self.foots[self.fn].offset, nodes=self.foots[self.fn].nodes, surfaces=self.foots[self.fn].surfaces)

                print ("* Actual Area : %.2f cm2"%(self.ActualArea*10000))
                if not self.foots[self.fn].initial_shift and shift: 
                    self.foots[self.fn].initial_shift = shift 
                
            elif '.odb' in jobFile: 
                self.foots[self.fn].sfric = False 
                self.lineEdit_jobFile.setText(jobFile.split("/")[-1]) 

                try: 
                    self.foots[self.fn].nodes, self.foots[self.fn].surfaces, self.foots[self.fn].offset, \
                        self.foots[self.fn].initial_shift = readDAT(self.localODB_dat)
                except Exception as EX: 
                    print ("File ERROR")
                    self.fn -= 1
                    self.filename.setText( "FILE ERROR" )
                    return 
                
                if not len(self.foots[self.fn].nodes): 
                    self.filename.setText("No footprint data")
                    print ("No footprint data")
                    self.fn -= 1
                    self.filename.setText( "FILE ERROR" )
                    return 
                
                print ("* [ODB] lateral shift from DAT=%.2f "%(self.foots[self.fn].initial_shift*1000))
                self.px, self.py, self.pv, self.ActualArea, shift, surf_values = self.datFootprint(\
                     mesh=self.mesh, ptn=self.ptn, smart=self.smart, angle=self.angle, shift=self.foots[self.fn].initial_shift, \
                         offset=self.foots[self.fn].offset, nodes=self.foots[self.fn].nodes, surfaces=self.foots[self.fn].surfaces, \
                             odb=True)

                print ("* Actual Area : %.2f cm2"%(self.ActualArea*10000))
                if not self.foots[self.fn].initial_shift and shift: 
                    self.foots[self.fn].initial_shift = shift 
                
            elif '.sfric' in  jobFile:
                ptnmesh = None 
                self.lineEdit_jobFile.setText(jobFile.split("/")[-1])
                if self.connectionStatus: 
                    self.smart = makingFullFilePath_linux(workingDirectory, simulationID+".inp")
                    jobFile = self.localSfricResult

                    sfricResult =  self.localSfricResult
                    sfricModel =  self.localSfric
                    mesh2d = self.localMesh
                    ptnmesh = self.localPtn
                    smart = self.localSMART
                    if isfile(mesh2d): 
                        outer, belt, bead, carcass = readBodyLayout(meshfile=mesh2d)

                else: 
                    sfricResult = jobFile
                    sfricModel = jobFile[:-3]

                if not isfile(self.localMesh) and self.connectionStatus: 
                    axi = getAXI_filename_SMARTInput(self.localSMART)
                    axi = makingFullFilePath_linux(workingDirectory, axi)
                    try: 
                        axifile = self.sftp.get(axi, self.localAxi)
                        _= LayoutMesh_From_axi(self.localAxi, output=self.localMesh)
                        outer, belt, bead, carcass = readBodyLayout(meshfile=self.localMesh)
                    except: 
                        self.filename.setText (" No found axi file.")
                        print (" No found axi file.")
                        self.filename.setText( "FILE ERROR" )
                        self.fn -= 1
                        pass 

                sfric = SFRIC() #ResultSfric(model="", result="", sfric='', deformed=1, ht=8.0E-03, sfht=1.0E-03)
                initNodes = ResultSfric(model=sfricModel, result=sfricResult,sfric=sfric, ht=0.8e-3, sfht=1.0e-3)
                if not len(initNodes)  or np.max(sfric.Node.Node[:,4])<1.0: 
                    self.filename.setText("No footprint data")
                    print ("!! No footprint data in file")
                    print (sfricModel)
                    print (sfricResult)
                    self.filename.setText( "FILE ERROR" )
                    self.fn -= 1
                    return 

                self.foots[self.fn].nodes = np.array(sfric.Node.Node)
                self.foots[self.fn].surfaces = sfric.Surface.Surface

                node_ids = self.foots[self.fn].nodes[:,0]
                ix = np.where(node_ids>10**7)[0]
                td_ids = node_ids[ix]
                self.foots[self.fn].offset = findout_offset(td_ids, step=10**4, shift=-10**7)
                lateralShift, angle = lateralShift_fromSFRIC(sfric=sfric, initial=initNodes, offset=self.foots[self.fn])
                print ("lateral shift=%.2fmm"%(lateralShift*1000))
                self.foots[self.fn].initial_shift = lateralShift
                
                xs, ys, vs, self.ActualArea, self.foots[self.fn].initial_shift, surf_values= interpolation_footprint_pressure(nodes=self.foots[self.fn].nodes, \
                    surfaces=self.foots[self.fn].surfaces, vmin=self.vmin, vmax=self.vmax, rotating=angle, \
                    dotNum=self.density, trd=10**7, post=False, Yshift=lateralShift, ptn=ptnmesh)
                
                self.px = np.array(xs); self.py = np.array(ys); self.pv = np.array(vs)
                self.foots[self.fn].sfric = True 
                
                print (" Footprint from SFRIC")

                # self.px, self.py, self.pv, self.ActualArea, shift = self.sfricFootprint(jobFile, mesh=self.mesh, ptn=self.ptn, smart=self.smart, angle=self.angle)
                
            
            else: 
                self.filename.setText("Results files should be '-postfoot.dat' or '*.sfric000'")

            self.foots[self.fn].surface_values = np.array(surf_values)
            
            self.skip_text = True 
            

            if isfile(self.localISLMFPC): 
                self.foots[self.fn].ISLM_FPC = True 
                print ("* Loading ISLM FPC")
                self.foots[self.fn].inputISLM_FPC(self.localISLMFPC)

            if isfile(self.localISLMCaliFPC): 
                self.foots[self.fn].ISLM_caliFPC = True 
                print ("* Loading ISLM Calibrated FPC")
                self.foots[self.fn].inputISLM_caliFPC(self.localISLMCaliFPC)

            if self.foots[self.fn].ISLM_FPC: 
                self.radio_ISLM_org.setEnabled(True)
                self.radio_ISLM_org.setChecked(True)
            else: 
                self.radio_calculation.setChecked(True)
                self.radio_ISLM_org.setEnabled(False)

            if isfile(self.localDeformed): 
                self.foots[self.fn].edges = extract_profile_crown(self.localDeformed )
                print(" Deformed profile was loaded ")
            


            if isfile(self.localISLMPoints): 
                with open(self.localISLMPoints) as PT: 
                    lines = PT.readlines()
                ptx =[]; pty=[]
                for line in lines : 
                    wds = line.split("\t")
                    cnt = 0 
                    for w in wds: 
                        if not w == '': 
                            cnt += 1 
                            if cnt ==3: 
                                ptx.append(float(w.strip()))
                            if cnt ==4: 
                                pty.append(float(w.strip()))
                self.foots[self.fn].ISLM_boundary=[np.array(ptx)+self.foots[self.fn].initial_shift, np.array(pty)]
                # self.foots[self.fn].ISLM_boundary_Init=[np.array(ptx)+self.foots[self.fn].initial_shift, np.array(pty)]
                self.foots[self.fn].ISLM_boundary_Init=[np.array(ptx), np.array(pty)]
                print ("** Loading ISLM FPC Points")
                print ("   ISLM FPC Boundary Points Shift = %.2f"%((self.foots[self.fn].initial_shift)*1000))

            if isfile(self.localISLMCaliPoints): 
                with open(self.localISLMCaliPoints) as PT: 
                    lines = PT.readlines()
                ptx =[]; pty=[]
                for line in lines : 
                    wds = line.split("\t")
                    cnt = 0 
                    for w in wds: 
                        if not w == '': 
                            cnt += 1 
                            if cnt ==3: 
                                ptx.append(float(w.strip()))
                            if cnt ==4: 
                                pty.append(float(w.strip()))
                self.foots[self.fn].ISLM_caliboundary=[np.array(ptx)+self.foots[self.fn].initial_shift, np.array(pty)]
                # self.foots[self.fn].ISLM_boundary_Init=[np.array(ptx)+self.foots[self.fn].initial_shift, np.array(pty)]
                self.foots[self.fn].ISLM_caliboundary_Init=[np.array(ptx), np.array(pty)]
                print ("** Loading ISLM FPC Calibrated Points")
                print ("   ISLM FPC Boundary Points Shift = %.2f"%((self.foots[self.fn].initial_shift)*1000))

            if not len(self.px): 
                self.filename.setText("No Footprint in result file")
                self.fn -= 1
                self.filename.setText( "FILE ERROR" )
                return 

            
            self.foots[self.fn].inputInitalFootprint(self.px, self.py, self.pv, self.ActualArea)
            self.foots[self.fn].xs, self.foots[self.fn].ys, self.foots[self.fn].vs = \
                self.rePosition(self.foots[self.fn], self.vmin,  float(self.lineEdit_rotating.text()), float(self.lineEdit_lateralShift.text()))


            self.foots[self.fn].centerPress = contPress(self.foots[self.fn].xs, self.foots[self.fn].ys, self.foots[self.fn].pv,\
                                vmin=self.vmin, displim=0.25, savefile=None)
            

            self.foots[self.fn] = self.calculatingFPC(self.foots[self.fn])
            

            plus6 = self.fn % 6 

            self.current[plus6].setEnabled(True)
            self.current[plus6].setChecked(True)

            self.printObjectFPC(self.foots[self.fn])

            self.filename.setText("Footprint was loaded")
            if self.fn == 0: 
                txt = "\n\n FP%d: "%(self.fn+1)
            else: 
                txt = " FP%d: "%(self.fn+1)
            txt += jobFile.split("/")[-1] + "\n"
            if isfile(self.localSMART): 
                press, load, speed, camber, sa, sr = readSMART_Inp(self.localSMART)
                txt += ' > P=%.2fkgf/cm2, L=%.1fkgf, V=%.1fkph\n > Camber=%.1f, Slip Angle=%.1f, Slip Ratio=%.1f%%\n'%(press,load,speed,camber,sa,sr)
                txt += ' : Area(Actual/Total) = %.1f/%.1f'%(self.foots[self.fn].ISLM_actualArea*10000, self.foots[self.fn].ISLM_totalArea*10000)
                txt += ', Roundness=%.1f\n'%(self.foots[self.fn].ISLM_roundness*100)
                txt += ' : Center Length=%.1f, Width=%.1f\n\n'%(self.foots[self.fn].ISLM_lengths[10], self.foots[self.fn].ISLM_widths[10])

                if camber : ## node.Rotate(camber, xy=23)
                    
                    cangle = np.radians(camber)
                    self.foots[self.fn].camber = cangle 
                    repos =[]
                    for nd in self.foots[self.fn].edges[0]: 
                        ni = nd[0]; n1 = nd[1]
                        n2 = np.cos(cangle)*nd[2] + np.sin(cangle)*nd[3]
                        n3 = -np.sin(cangle)*nd[2] + np.cos(cangle)*nd[3]
                        repos.append([ni, n1, n2, n3])
                    self.foots[self.fn].edges[0] = np.array(repos)
                    
            else: 
                txt += ' : Area(Actual/Total) = %.1f/%.1f'%(self.foots[self.fn].actualArea*10000, self.foots[self.fn].totalArea*10000)
                txt += ', Roundness=%.1f\n'%(self.foots[self.fn].roundness*100)
                txt += ' : Center Length=%.1f, Width=%.1f\n\n'%(self.foots[self.fn].lengths[10], self.foots[self.fn].widths[10])

            self.loadedVT[self.fn] = txt
            self.skip_text = False 
        else: 
            self.fn -= 1 

        if self.fn >= self.FN-6: 
            self.radio_plus0.setEnabled(True)
            self.radio_plus6.setEnabled(True)
            self.radio_plus12.setEnabled(True)
            self.radio_plus12.setChecked(True)
        elif self.fn >= 6 and self.fn < self.FN: 
            self.radio_plus0.setEnabled(True)
            self.radio_plus6.setEnabled(True)
            self.radio_plus12.setEnabled(False)
            self.radio_plus6.setChecked(True)
        elif self.fn < 6 and self.fn>0: 
            self.radio_plus0.setEnabled(True)
            self.radio_plus6.setEnabled(False)
            self.radio_plus12.setEnabled(False)
            self.radio_plus0.setChecked(True)
        else: 
            self.radio_plus6.setEnabled(False)
            self.radio_plus12.setEnabled(False)
            self.radio_plus0.setEnabled(False)

        fn = (self.fn+1) % 6 
        for i in range(6): 
            if i < fn: 
                self.current[i].setEnabled(True)
            else: 
                self.current[i].setEnabled(False)

        jobname = jobFile.split("/")[-1]
        self.tableWidget.setItem(self.fn, 1, QtWidgets.QTableWidgetItem(jobname))

    def reCalculatingFPC(self, fn=None ):
        
        if isinstance(fn, type(None)) or not fn: 
            fn = self.currentFootprintNumber()
        self.textBrowser.clear()
        if not len(self.foots[fn].xs): return 

        self.vmin = float(self.lineEdit_min_colorRange.text())
        self.vmax = float(self.lineEdit_max_colorRange.text())
        self.foots[fn].angle = float(self.lineEdit_rotating.text())
        self.foots[fn].lateralShift = float(self.lineEdit_lateralShift.text())/1000
        
        print ("\n***********************************")
        print (  "** Recalculating FPC (#%d)"%(fn+1))
        print (  "***********************************")

        if self.foots[fn].vmin != self.vmin : 
            self.foots[fn].actualArea = calculatingActualArea(self.foots[fn].surface_values, self.vmin)
            self.foots[fn].vmin = self.vmin 
        self.foots[fn].vmax = self.vmax 

        
        self.foots[fn].xs, self.foots[fn].ys, self.foots[fn].vs = \
            self.rePosition(self.foots[fn], self.vmin,  float(self.lineEdit_rotating.text()), float(self.lineEdit_lateralShift.text()))

        # center_Pressure = contPress(self.foots[fn].xs, self.foots[fn].ys, self.foots[fn].pv, vmin=self.vmin, displim=0.25, savefile=None)
        self.foots[fn].centerPress = contPress(self.foots[fn].xs, self.foots[fn].ys, self.foots[fn].pv,\
                                vmin=self.vmin, displim=0.25, savefile=None)
        # self.foots[fn].inputCenterPressure(center_Pressure)

        self.foots[fn] = self.calculatingFPC(self.foots[fn])

        saveText = self.textBrowser.toPlainText()

        self.add_log(saveText)

        
        if self.boundaryplotting: 
            self.addComparingBoundary()
        else: 
            self.size = float(self.lineEdit_pointSize.text())
            self.figure.Plotting(self.foots[fn].xs, self.foots[fn].ys, self.foots[fn].vs, vmin=self.vmin, vmax=self.vmax, size=self.size)
            self.radio_calculation.setChecked(False)
    
        self.filename.setText("FPC was updated.")

        self.checkBox_6.setChecked(False)
        self.check_showFittingPoints.setEnabled(True)
        if self.check_showFittingPoints.isChecked(): 
            self.viewRefPoints()

        self.printFPC(add=saveText)

    def changeFootprint(self): 
        self.checkBox_6.setChecked(False) ## uncheck the grid view check box 
        fn = self.currentFootprintNumber()

        if not self.foots[fn].totalArea: 
            self.filename.setText("* No image to print")
            return 

        if not self.foots[fn].edges: 
            self.checkBox_showProfile.setEnabled(False)
            self.checkBox_showProfile.setChecked(False)
        else: 
            self.checkBox_showProfile.setEnabled(True)

        if self.foots[fn].ISLM: 
            self.radio_ISLM_org.setEnabled(True)
        else: 
            self.radio_ISLM_org.setChecked(False)
            self.radio_ISLM_org.setEnabled(False)
        
        if self.check_showFittingPoints.isChecked(): 
            self.radio_ISLM_cali.setEnabled(True)
        else: 
            self.radio_ISLM_cali.setChecked(False)
            self.radio_ISLM_cali.setEnabled(False)

        self.lineEdit_jobFile.setText(self.foots[fn].workingfile.split("/")[-1])
        
        self.printObjectFPC(self.foots[fn])

        self.size = float(self.lineEdit_pointSize.text())

        if self.foots[fn].ISLM and self.radio_ISLM_org.isChecked(): 
            if self.checkBox_showProfile.isChecked() and self.foots[fn].edges:
                edges = self.foots[fn].edges 
                if self.foots[fn].initial_shift: 
                    nodes = np.array(edges[0])
                    nymax = np.max(nodes[:,3])
                    en =[]
                    for n in nodes: 
                        n2 = np.cos(self.foots[fn].camber)*n[2] + np.sin(self.foots[fn].camber)*(n[3]-nymax)
                        n3 = -np.sin(self.foots[fn].camber)*n[2] + np.cos(self.foots[fn].camber)*(n[3]-nymax)
                        en.append([n[0], n[1], n2, n3])

                idx = np.where(self.foots[fn].ISLM_contourV>=self.foots[fn].vmin)[0]
                self.figure.Plotting(self.foots[fn].ISLM_contourX[idx], self.foots[fn].ISLM_contourY[idx],\
                    self.foots[fn].ISLM_contourV[idx], vmin=self.foots[fn].vmin, vmax=self.foots[fn].vmax,\
                        size=self.size, contour=True, profile=[ np.array(en), edges[1]], lateralShift=self.foots[fn].lateralShift)

            else: 
                idx = np.where(self.foots[fn].ISLM_contourV>=self.foots[fn].vmin)[0]
                self.figure.Plotting(self.foots[fn].ISLM_contourX[idx], self.foots[fn].ISLM_contourY[idx],\
                    self.foots[fn].ISLM_contourV[idx], vmin=self.foots[fn].vmin, vmax=self.foots[fn].vmax,\
                        size=self.size, contour=True)

            self.filename.setText("Max Press. %.3fMPa, Mid=%.3fMPa, Min=%.3fMPa"%(np.max(self.foots[fn].ISLM_contourV[idx])/10**6,
                         np.median(self.foots[fn].ISLM_contourV[idx])/10**6,  np.min(self.foots[fn].ISLM_contourV[idx])/10**6))

        if self.radio_calculation.isChecked(): 
            if self.checkBox_showProfile.isChecked() and self.foots[fn].edges:
                edges = self.foots[fn].edges 
                if self.foots[fn].initial_shift: 
                    nodes = np.array(edges[0])
                    nymax = np.max(nodes[:,3])
                    en =[]
                    for n in nodes: 
                        n2 = n[2]+ self.foots[fn].initial_shift
                        n2 = np.cos(self.foots[fn].camber)*n2 + np.sin(self.foots[fn].camber)*(n[3]-nymax)
                        n3 = -np.sin(self.foots[fn].camber)*n2 + np.cos(self.foots[fn].camber)*(n[3]-nymax)

                        en.append([n[0], n[1], n2, n3])
                    # edges[0] = np.array(en)
                    print (" Profile applying the initial shift ",  self.foots[fn].initial_shift)

                self.figure.Plotting(self.foots[fn].xs, self.foots[fn].ys, self.foots[fn].vs, \
                    vmin=self.foots[fn].vmin, vmax=self.foots[fn].vmax, size=self.size, profile=[ np.array(en), edges[1]], lateralShift=self.foots[fn].lateralShift)
            else: 
                self.figure.Plotting(self.foots[fn].xs, self.foots[fn].ys, self.foots[fn].vs, \
                    vmin=self.foots[fn].vmin, vmax=self.foots[fn].vmax, size=self.size)

            self.filename.setText("Max Press. %.3fMPa, Mid=%.3fMPa, Min=%.3fMPa"%(np.max(self.foots[fn].vs)/10**6, np.median(self.foots[fn].vs)/10**6, np.min(self.foots[fn].vs)/10**6))
            
        self.lineEdit_PointsDensity.setText(str(self.foots[fn].density))
        self.lineEdit_rotating.setText(str(self.foots[fn].angle))
        self.lineEdit_lateralShift.setText(str(self.foots[fn].lateralShift*1000))
        self.lineEdit_fittingOrder.setText(str(self.foots[fn].fitting))
        # self.check_showFittingPoints.setChecked(False)
        self.check_showFittingPoints.setEnabled(True)

        self.lineEdit_min_colorRange.setText(str(self.foots[fn].vmin))
        self.lineEdit_max_colorRange.setText(str(self.foots[fn].vmax))

        self.boundaryplotting = False
        self.plottingStatus(boundary=False)
        if self.check_showFittingPoints.isChecked(): 
            self.viewRefPoints()

    def displayAllprints(self): 
        if self.checkBox_6.isChecked(): 
            printsX =[]; printsY=[]; printsV=[]
            files =[]

            filter = True; contour = False 
            if self.radio_ISLM_org.isChecked(): 
                filter = False 
                contour = True
                for i in range(self.FN): 
                    if len(self.foots[i].px) and self.foots[i].ISLM: 
                        idx = np.where(self.foots[i].ISLM_contourV>=self.foots[i].vmin)[0]
                        printsX.append(self.foots[i].ISLM_contourX[idx])
                        printsY.append(self.foots[i].ISLM_contourY[idx])
                        printsV.append(self.foots[i].ISLM_contourV[idx])
                        name = self.foots[i].workingfile.split("/")[-1]
                        if name[-12:] == 'postfoot.dat': name = name[:-13]
                        files.append(name)
            
            else: 
                for i in range(self.FN): 
                    if len(self.foots[i].px): 
                        printsX.append(self.foots[i].xs)
                        printsY.append(self.foots[i].ys)
                        printsV.append(self.foots[i].vs)
                        name = self.foots[i].workingfile.split("/")[-1]
                        if name[-12:] == 'postfoot.dat': name = name[:-13]
                        files.append(name)

            self.vmin = float(self.lineEdit_min_colorRange.text())
            self.vmax = float(self.lineEdit_max_colorRange.text())
            self.size = float(self.lineEdit_pointSize.text())

            self.figure.Plotting(printsX, printsY,\
                        printsV, vmin=self.vmin, vmax=self.vmax, size=self.size,\
                            grid=True, legends=files, filter = filter, contour=contour )

            # self.boundaryplotting = False
            self.plottingStatus(boundary=False)
            self.checkAllboundaries(True)
            self.check_showFittingPoints.setChecked(False)
            self.check_showFittingPoints.setDisabled(True)
        else: 
            self.changeFootprint()
            self.check_showFittingPoints.setEnabled(True)
      
    def checkView(self): 
        if self.checkBox_6.isChecked(): ## Grid View 
            self.displayAllprints() 
            self.checkBox_showProfile.setDisabled(True)
        elif self.boundaryplotting: 
            self.checkBox_showProfile.setDisabled(False)
            self.plottingStatus(boundary=True)
            self.addComparingBoundary()
        else: 
            self.checkBox_showProfile.setDisabled(False)
            self.plottingStatus(boundary=False)
            self.changeFootprint()
        self.printFPC()


    def footprint_with_profile(self): 
        pass 
    ################################################

    def calculatingISLM_footprint(self): 

        pass 
    
    def printFPC(self, add=False): 
        fn = self.currentFootprintNumber()
        self.printObjectFPC(self.foots[fn], add=add)
        # self.viewRefPoints()

    def printObjectFPC(self, foot, add=False): 
        lengths=[]
        if self.radio_ISLM_org.isChecked(): 
            if foot.ISLM_totalArea : 
                actualArea = foot.ISLM_actualArea
                totalArea = foot.ISLM_totalArea
                roundness = foot.ISLM_roundness 
                lengths = foot.ISLM_lengths
                widths = foot.ISLM_widths 
                GWShape = foot.ISLM_GWShape 
                localGWShape = foot.ISLM_localGWShape
                roundnessShape = foot.ISLM_roundnessShape 
                squarenessShape = foot.ISLM_squarenessShape
                # print ("** ISLM FPC")
            else: 
                self.radio_ISLM_org.setChecked(False)
                self.radio_ISLM_org.setDisabled(True)
                self.radio_ISLM_cali.setChecked(False)
                self.radio_ISLM_cali.setDisabled(True)
                self.radio_calculation.setChecked(True)
            # self.filename.setText("FPCs base on Contact Center")
        elif self.radio_ISLM_cali.isChecked(): 
            if foot.ISLM_cali_totalArea : 
                actualArea = foot.ISLM_cali_actualArea
                totalArea = foot.ISLM_cali_totalArea
                roundness = foot.ISLM_cali_roundness 
                lengths = foot.ISLM_cali_lengths
                widths = foot.ISLM_cali_widths 
                GWShape = foot.ISLM_cali_GWShape 
                localGWShape = foot.ISLM_cali_localGWShape
                roundnessShape = foot.ISLM_cali_roundnessShape 
                squarenessShape = foot.ISLM_cali_squarenessShape
                # print ("** ISLM FPC")
            else: 
                self.radio_ISLM_org.setChecked(False)
                self.radio_ISLM_org.setDisabled(True)
                self.radio_ISLM_cali.setChecked(False)
                self.radio_ISLM_cali.setDisabled(True)
                self.radio_calculation.setChecked(True)
            # self.filename.setText("FPCs base on Contact Center")

        else: 
            # print ("** Calculated FPC")
            actualArea = foot.actualArea
            totalArea = foot.totalArea
            roundness = foot.roundness 
            lengths = foot.lengths
            widths = foot.widths 
            GWShape = foot.GWShape 
            localGWShape = foot.localGWShape
            roundnessShape = foot.roundnessShape 
            squarenessShape = foot.squarenessShape
            # self.filename.setText("FPCs based on Current Configuration")
        txt =''
        if len(self.skippedVT): 
            txt+="## Wrong Simulation Name(s)\n"
            for sVT in self.skippedVT: 
                txt+= "%s\n"%(sVT)
            txt+='\n\n'
        if len(lengths) : 
            txt += "* Total   Contact Area =%8.2f\n* Actual Contact Area =%8.2f\n* Roundness             =%8.1f%%\n"%(totalArea*10000, \
                actualArea*10000, roundness*100)
            sq1 = (lengths[5]+lengths[15])/2/lengths[10] *100
            sq2 = (lengths[3]+lengths[17])/2/lengths[10] *100
            txt += '\n* Length Position    15%,    25%,    50%,   75%,    85%\n'
            txt += "  Contact Length :%7.1f,%7.1f,%7.1f,%7.1f,%7.1f\n"%(lengths[3], lengths[5], lengths[10], lengths[15], lengths[17])
            txt += "   Contact  Width :%7.1f,%7.1f,%7.1f,%7.1f,%7.1f\n"%(widths[3], widths[5], widths[10], widths[15], widths[17])
            txt += "\n* Square(Contact) Ratios \n   25/75%% : %5.1f%%,    15/85%% : %5.1f%%\n"%(sq1, sq2)
            txt += "\n* Global Gullwing shape =%6.3f\n* Local Gullwing Shape  =%6.3f\n"%(GWShape, localGWShape)
            txt +=   "* Roundness Shape       =%6.3f\n* Squareness Shape      =%6.3f\n"%(roundnessShape, squarenessShape)

            for text in self.loadedVT: 
                txt += text 
                
            txt += self.terms
        
            if not self.skip_text : 
                if add: 
                    text += "\n"
                    txt += str(add)
                self.textBrowser.setText(txt)

    
    def rePosition(self, foot, vmin, angle, shift): 
        if not foot.actualArea: 
            return 
        ixs = np.where(foot.pv>vmin)
        px = foot.px[ixs]
        py = foot.py[ixs]
        pv = foot.pv[ixs]
        xs, ys = \
            rotatePoints(px, py, angle )
        xs += shift/1000
        if not isinstance(foot.ISLM_boundary, type(None)): 
            foot.ISLM_boundary[0] = foot.ISLM_boundary_Init[0] + shift/1000
        return xs, ys, pv 

    def calculatingFPC(self, foot): 
        
        areapoints, basicFPC, advFPC, FPCLines \
            = FPC(foot.xs, foot.ys, foot.vs, cp=foot.centerPress, \
                vmin=self.vmin, vmax=self.vmax, ActualArea=foot.actualArea, fitting=int(self.lineEdit_fittingOrder.text()))
        foot.inputFPC(areapoints, basicFPC, advFPC, FPCLines )
        foot.inputFitting(int(self.lineEdit_fittingOrder.text()))
        # self.printObjectFPC(foot)

        xs, ys \
        = FPC(foot.xs,foot.ys, foot.vs, cp=foot.centerPress, comparing=True, \
            vmin=self.vmin, vmax=self.vmax, ActualArea=foot.actualArea, fitting=int(self.lineEdit_fittingOrder.text()))
        xs, ys = SearchPoints(xs, ys, nofitting=True)
        foot.inputBoundary(xs, ys)

        self.check_showFittingPoints.setEnabled(True)
        return foot 
    
    def datFootprint(self, nodes=None, surfaces=None, mesh=None, ptn=None, smart=None, isPTN=False, angle=0, axi=None, \
        shift=0, offset=0, odb=False):
        mesh2d = None; ptnmesh = None; smartInp = None 
        lateralShift = 0 
        camber = 0 
        slip = 0 
        centertop = None 
        sft = 0 
        if self.connectionStatus and shift == 0: 
            mesh2d = self.localMesh
            ptnmesh = self.localPtn
            smartInp = self.localSMART
            # Y_Shift = 1.0
            centertop = None 
            if isfile(smartInp): 
                with open(smartInp) as IN: 
                    lines = IN.readlines()
                for line in lines: 
                    if '*CAMBER_ANGLE' in line: 
                        camber = float(line.split("=")[1].strip())
                    if "*LATERAL_CONTROL" in line: 
                        wd = line.split("=")[1]
                        ws = wd.split(",")
                        if '1' in ws[0] : 
                            slip = float(ws[1].strip())
            else: 
                slip = 0 
                camber = 0 

            # print (localAxi, mesh2d, isPTN)
            if isfile(mesh2d): 
                outer, belt, bead, carcass = readBodyLayout( meshfile=mesh2d)
            
                orgn = getNode_2dMesh(mesh2d)
            
                ix1 = np.where(orgn[:,2]>-0.002)[0]
                ix2 = np.where(orgn[:,2]< 0.002)[0]
                ix = np.intersect1d(ix1, ix2)
                posnodes = orgn[ix]
                zmax = np.max(posnodes[:,3])
                ix = np.where(posnodes[:,3]==zmax)[0][0]
                centertop = posnodes[ix]

            if isfile(self.localDeformed):
                npn = getNode_2dMesh(self.localDeformed)
                ix = np.where(npn[:,0] == centertop[0])[0][0]

                ixs = np.where(npn[:,2]>0)[0]; pos=npn[ixs]
                ixs = np.where(npn[:,2]<0)[0]; neg=npn[ixs]
                posmin = np.min(pos[:, 3]); pix=np.where(pos[:,3]==posmin)[0][0]
                negmin = np.min(neg[:, 3]); nix=np.where(neg[:,3]==negmin)[0][0]
                
                nx = npn[:,2]; ny = npn[:,3]
                rnx, rny = rotatePoints(nx, ny, angle=camber)

                inx =  np.where(npn[:,0] == pos[pix][0])[0][0]; psn = rnx[inx]
                inx =  np.where(npn[:,0] == neg[nix][0])[0][0]; nsn = rnx[inx]
                sft = (psn + nsn)/2 
                npn[:,2] += sft 
                
                print ("* Lateral Shift Calculation from deformed profile")
                print ("  Camber Angle=%.1f degree, shift=%.3fmm"%(camber, sft*1000))
                print ("  Center Top Node Y=%.2f"%(npn[ix][1]*1000))
                
                lateralShift = sft #
        else: 
            lateralShift = shift
        # if odb: 
        #     xs, ys, pv, ActualArea, shift, surf_values = interpolation_footprint_pressure(vmin=self.vmin, vmax=self.vmax, rotating=self.angle, \
        #         dotNum=int(self.density/2), trd=10**7, nodes=nodes, surfaces=surfaces, post=True, Yshift=lateralShift, ptn=ptnmesh,\
        #             offset=offset, layoutCenterNode=centertop)

        # else: 

        
        xs, ys, pv, ActualArea, shift, surf_values = interpolation_footprint_pressure(vmin=self.vmin, vmax=self.vmax, rotating=self.angle, \
            dotNum=self.density, trd=10**7, nodes=nodes, surfaces=surfaces, post=True, Yshift=lateralShift, ptn=ptnmesh,\
                offset=offset, layoutCenterNode=centertop)
        print ("* Footprint from post-processed data")
        
        return np.array(xs), np.array(ys), np.array(pv), ActualArea, shift, surf_values
    
    def getting_onLine_Filenames(self, manual=False): 
        
        if manual: 
            workingDirectory = self.lineEdit_jobDir.text().strip()
            if not workingDirectory=='': 
                if workingDirectory[-1]!="/" :
                    workingDirectory+="/"
            try: 
                dirList =self.sftp.listdir(workingDirectory)
            except Exception as EX: 
                print(EX)
                print (workingDirectory)
                self.filename.setText("The directory is not found.")
                return  False, False, False 
            
            smart =  self.lineEdit_smartFile.text().strip()
            for name in dirList:
                # print ("  ", name,"=?", smart)
                # print( makingFullFilePath_linux(workingDirectory, name) )
                
                if smart == name:
                    remoteSmart = makingFullFilePath_linux(workingDirectory, name)
                    
                    self.sftp.get(remoteSmart, self.localSMART)
                    if checkSMART_File(self.localSMART): 
                        simulationID = name[:-4] 
                        break 
            else: 
                self.filename.setText("The smart input was not found.")
                print ("The smart input was not found.")
                print (workingDirectory)
                return  False, False, False 

            jobFile = self.getRemoteFiles(workingDirectory, simulationID, manual=True)
            if isinstance(jobFile, type(None)): 
                self.filename.setText("No result file in the directory")
                return  False, False, False 

        else: 
            workingDirectory = '/home/users/fiper/ISLM/ISLM_JobFolder/'
            DOE = self.lineEdit_DOE_ID.text()
            loc = self.lineEdit_0_Location.text()
            vt = self.lineEdit_1_VT_Number.text()
            try: 
                vtSerial = int(self.lineEdit_3_VT_Serial.text())
            except Exception: 
                self.filename.setText("Wrong VT No")
                print ("Wrong VT No ")
                return  None, None, None 
            vtRevision = self.lineEdit_2_VT_Revision.text()
            simType = self.lineEdit_4_Sim_Type.text()
            try: 
                simNum = int(self.lineEdit_5_Sim_Num.text())
            except Exception: 
                self.filename.setText("Wrong Simulation No")
                print ("Wrong Simulation No ")
                return  None, None, None 

            vtNumber = vt + "VT" + str(format(vtSerial, '05')) + "-" + vtRevision
            simulationID = loc + "-" + vtNumber + '-' + simType + "-" + str(format(simNum, '04'))

            if self.radio_Single.isChecked(): 
                jobDir = loc+"/"+vt + "/SingleProcess/" + vtNumber + "/" + simulationID 
                workingDirectory += jobDir 

            else: 
                jobDir = loc +"/" + vt + "/DOE" + DOE + "/"+ vtNumber + "/" + simulationID 
                workingDirectory += jobDir 

            
            try: 
                dirList =self.sftp.listdir(workingDirectory)
            except: 
                self.filename.setText("The directory is not found.")
                print ("The directory is not found.")
                print (workingDirectory)
                return  None, None, None 

            for name in dirList: 
                if ".inp" == name[-4:].lower(): 
                    remoteSmart = makingFullFilePath_linux(workingDirectory, name)
                    self.sftp.get(remoteSmart, self.localSMART)
                    if checkSMART_File(self.localSMART): 
                        simulationID = name[:-4] 
                        break 
            else: 
                self.filename.setText("The smart input was not found.")
                print (("The smart input was not found."))
                return None, None, None 

            try: 
                jobFile = self.getRemoteFiles(workingDirectory, simulationID+'.inp', manual=False)
            except Exception as EX: 
                print (EX)
                print ("No Job file! Simulation is not completed.")
                return None, None, None  


        slip = getSlipangle(self.localSMART)
        if not isinstance(slip, type(None)): 
            self.lineEdit_rotating.setText(slip)
        else: 
            self.lineEdit_rotating.setText('0')

        return jobFile, simulationID, workingDirectory 

    def Starting(self):

        rpys = listdir(getcwd())
        for rpy in rpys: 
            if '.rpy.' in rpy: 
                remove(rpy)
        
        self.sfric = SFRIC()

        self.settingFile = 'setting.dat'
        if not isfile(self.settingFile): 
            self.writeSetting(default=True)
        self.readSetting()
        self.setColorRange()

        self.pushPointSize.setDisabled(True)
        self.pushPointsDensity.setDisabled(True)
        self.jobStatus()

        for _ in range(self.FN): 
            self.foots.append(FOOTPRINT())

        self.current = [self.radioButton_print1, self.radioButton_print2, self.radioButton_print3, self.radioButton_print4, self.radioButton_print5, self.radioButton_print6]


        self.radioButton_print1.setDisabled(True)
        self.radioButton_print2.setDisabled(True)
        self.radioButton_print3.setDisabled(True)
        self.radioButton_print4.setDisabled(True)
        self.radioButton_print5.setDisabled(True)
        self.radioButton_print6.setDisabled(True)
        self.radio_ISLM_org.setDisabled(True)
        self.radio_ISLM_cali.setDisabled(True)
        
        self.radio_plus0.setDisabled(True)
        self.radio_plus6.setDisabled(True)
        self.radio_plus12.setDisabled(True)
        self.radio_plus0.setChecked(True)

        self.lineEdit_DOE_ID.setDisabled(True)
        self.pushButton_refreshAll.setDisabled(True)

        self.checkBox_showGrv.setChecked(True)
        self.checkBox_showBndPressure.setChecked(False)
        self.checkBox_showProfile.setChecked(False)

        self.group_SimulationType.setEnabled(False)

        # self.checkBox_showBndPressure.setDisabled(True)


        txt = "* Total   Contact Area\n* Actual Contact Area\n* Roundness\n"
        txt += '\n* Length Position    15%,    25%,    50%,   75%,    85%\n'
        txt += "  Contact Length :\n"
        txt += "  Contact   Width :\n"
        txt += "\n* Square(Contact) Ratio \n \n"
        txt += "\n* Global Gullwing shape =      \n* Local Gullwing Shape  = \n"
        txt +=   "* Roundness Shape       =      \n* Squareness Shape      =  \n"

        for text in self.loadedVT: 
            txt += text 

        txt += self.terms

        self.textBrowser.setText(txt)
        self.removeLocalFiles()


    def abaqusFootdata(self, mesh2d, odb=None ): 
        # root = '/home/users/fiper/Desktop/Documents/KJG/Endurance/StandardMesh/RND-3002196VT00023-0-S106-0002'
        # inp = 'RND-3002196VT00023-0-S106-0002-3DST.inp'
        # odb = inp[:-3]+'odb'
        # step =  '3'

        if self.connectionStatus: 
            root = self.lineEdit_jobDir.text().strip()
            odb = self.lineEdit_smartFile.text().strip()

            if '.inp' in mesh2d: 
                self.sftp.get(mesh2d, self.localMesh)
            elif '.ptn' in mesh2d: 
                self.sftp.get(mesh2d, self.localPtn)

            # self.filename.setText("Downloading 'ODB' file")
            print("Downloading file %s"%(odb))

            dirList =self.sftp.listdir(root)
            for dirs in dirList: 
                if dirs == odb: 
                    self.sftp.get(root+"/"+odb, self.localODB)
                    break 
            else: 
                print("*THERE IS NO FILE %s"%(odb))
                return 0
            
        # self.filename.setText("Extracting footprint data")
        print("Extracting footprint data")
        print (' > %s'%(odb))
        cont = 'CONT'
        step = 3 

        dta = self.lineEdit_patternMesh.text().split(",")

        if len(dta) ==3: 
            if "" != dta[0] or "mesh/ptn" in dta[0]: 
                inp = dta[0].strip()
            if "" != dta[1] or 'Contact Surface' in dta[1]: 
                cont = dta[1].strip()
            if "" != dta[2] or 'STEP No.' in dta[2]: 
                try: 
                    step =  int(dta[2].strip())
                except: 
                    step = 3
        elif 'Mesh 2D or Pattern Mesh' in dta: 
            self.lineEdit_patternMesh.setText(", CONT, 3")
        else: 
            self.lineEdit_patternMesh.setText(", CONT, 3")

        print ("Surface Name for Contacting : %s"%(cont))
        print ("Step to Load: %s"%(step))

        w = open('abq', 'w')
        w.write("%s\n"%(cont))
        w.write("%s\n"%(step))
        if isfile(self.localODB): 
            w.write("%s\n"%(self.localODB))
        else: 
            w.write("%s\n"%(odb))
        w.close()

        system('abaqus viewer noGUI=abaqus_footprint.py')

        print("Making footprint datafile")
        # self.filename.setText("Making footprint datafile")
        if isfile(self.localODB_CPress): 
            with open(self.localODB_CPress) as CP: 
                lines = CP.readlines()
        else: 
            self.filename.setText("CPRESS was not extracted!!")
            return 
        nodeStart = False 
        nodes =[]
        for line in lines: 
            if '----------------------------------------' in line: 
                nodeStart=True 
                continue 
            if 'Minimum' in line: 
                nodeStart = False 
            if nodeStart: 
                wd = line.strip().split(" ")
                cnt = 0 
                tmp = []
                for w in wd: 
                    if not '' == w: 
                        if cnt != 1: 
                            tmp.append(float(w.strip()))
                        cnt += 1 
                if len(tmp) ==4:  
                    nodes.append(tmp)
        npn = np.array(nodes)

        pressStart = False 
        press =[]
        precount=0
        for line in lines: 
            
            if 'CPRESS' in line: 
                pressStart=True 
                precount = 0 
                continue 
            if pressStart: 
                # print (line)
                precount += 1 
            if precount <= 2: continue 

            if 'Minimum' in line: 
                precount = 0 
                pressStart = False 
            if pressStart  : 
                
                wd = line.strip().split(" ")
                tmp = []
                for w in wd: 
                    if not '' == w: 
                        tmp.append(float(w.strip()))
                if len(tmp) > 2: 
                    press.append(tmp)
        npp = np.array(press)

        if not len(npn): 
            return False 
        zmax = np.max(npn[:,1])
        ix = np.where(npn[:,1]>zmax-0.001)[0]
        dnpn = npn[ix]
        
        ps = []
        for n in dnpn: 
            ix = np.where(npp[:,2]==n[0])[0]
            ps.append(npp[ix[0]][3])

        ps = np.array(ps)    
        makeDatFile_ODB(dnpn, ps, npp, self.localODB_dat)

        
        if isfile('abaqus.rpy'): remove('abaqus.rpy')

        return True 
    def jobStatus(self): 
        if self.connectionStatus: 
            if self.radio_Single.isChecked(): 
                self.lineEdit_jobDir.setDisabled(True)
                self.lineEdit_jobFile.setDisabled(True)
                self.lineEdit_smartFile.setDisabled(True)
                self.lineEdit_patternMesh.setDisabled(True)
                self.lineEdit_DOE_ID.setEnabled(False)
                self.lineEdit_0_Location.setEnabled(True)
                self.lineEdit_1_VT_Number.setEnabled(True)
                self.lineEdit_3_VT_Serial.setEnabled(True)
                self.lineEdit_2_VT_Revision.setEnabled(True)
                self.lineEdit_4_Sim_Type.setEnabled(True)
                self.lineEdit_5_Sim_Num.setEnabled(True)
            elif self.radio_Manual.isChecked(): 
                self.lineEdit_jobDir.setDisabled(False)
                # self.lineEdit_jobFile.setDisabled(False)
                self.lineEdit_smartFile.setDisabled(False)
                self.lineEdit_patternMesh.setDisabled(False)
                self.lineEdit_DOE_ID.setEnabled(False)
                self.lineEdit_0_Location.setEnabled(False)
                self.lineEdit_1_VT_Number.setEnabled(False)
                self.lineEdit_3_VT_Serial.setEnabled(False)
                self.lineEdit_2_VT_Revision.setEnabled(False)
                self.lineEdit_4_Sim_Type.setEnabled(False)
                self.lineEdit_5_Sim_Num.setEnabled(False)
            else: 
                self.lineEdit_jobDir.setDisabled(True)
                self.lineEdit_jobFile.setDisabled(True)
                self.lineEdit_smartFile.setDisabled(True)
                self.lineEdit_patternMesh.setDisabled(True)
                self.lineEdit_DOE_ID.setEnabled(False)
                self.lineEdit_0_Location.setEnabled(True)
                self.lineEdit_1_VT_Number.setEnabled(True)
                self.lineEdit_3_VT_Serial.setEnabled(True)
                self.lineEdit_2_VT_Revision.setEnabled(True)
                self.lineEdit_4_Sim_Type.setEnabled(True)
                self.lineEdit_5_Sim_Num.setEnabled(True)
        else: 
            self.lineEdit_jobDir.setDisabled(True)
            self.lineEdit_jobFile.setDisabled(True)
            self.lineEdit_smartFile.setDisabled(True)
            # self.lineEdit_patternMesh.setDisabled(True)
            self.lineEdit_DOE_ID.setDisabled(True)
            self.lineEdit_0_Location.setDisabled(True)
            self.lineEdit_1_VT_Number.setDisabled(True)
            self.lineEdit_3_VT_Serial.setDisabled(True)
            self.lineEdit_2_VT_Revision.setDisabled(True)
            self.lineEdit_4_Sim_Type.setDisabled(True)
            self.lineEdit_5_Sim_Num.setDisabled(True)

    
    def idInput(self): 
        self.writeSetting()

    def writeSetting(self, default=False): 
        if not default : 
            fp = open(self.settingFile, 'w') 
            fp.write("address=%s\n"%(self.lineEdit_address.text().strip()))
            fp.write("id=%s\n"%(self.lineEdit_hpc_ID.text().strip()))
            if self.radio_Single.isChecked(): fp.write("user=single\n") 
            elif self.radio_DOE.isChecked(): fp.write("user=doe\n") 
            else : fp.write("user=manual\n") 
            fp.write("doe=%s\n"%(self.lineEdit_DOE_ID.text()))
            fp.write("loc=%s\n"%(self.lineEdit_0_Location.text()))
            fp.write("vt=%s\n"%(self.lineEdit_1_VT_Number.text()))
            fp.write("vtNum=%s\n"%(self.lineEdit_3_VT_Serial.text()))
            fp.write("vtSerial=%s\n"%(self.lineEdit_2_VT_Revision.text()))
            fp.write("sim=%s\n"%(self.lineEdit_4_Sim_Type.text()))
            fp.write("simNum=%s\n"%( self.lineEdit_5_Sim_Num.text()))
            fp.write("wd=%s\n"%(self.lineEdit_jobDir.text()))
            fp.write("wf=%s\n"%(self.lineEdit_jobFile.text()))
            fp.write("ms=%s\n"%(self.lineEdit_patternMesh.text()))
            fp.write("sm=%s\n"%(self.lineEdit_smartFile.text()))
            if self.radio_PC.isChecked():  fp.write("grp=PCR\n")
            else: fp.write("grp=TBR\n")
            fp.write("vmin=%s\n"%(self.lineEdit_min_colorRange.text()))
            fp.write("vmax=%s\n"%(self.lineEdit_max_colorRange.text()))
            fp.write("size=%s\n"%(self.lineEdit_pointSize.text()))
            fp.write("density=%s\n"%(self.lineEdit_PointsDensity.text()))
            fp.write("angle=%s\n"%(self.lineEdit_rotating.text()))
            fp.write("fitting=%s\n"%(self.lineEdit_fittingOrder.text()))
            fp.write("dir=%s\n"%(self.cwd))
            fp.close()
        else: 
            fp = open(self.settingFile, 'w') 
            fp.write("address=10.82.66.65\n")
            fp.write("id=ISLM_User\n")
            fp.write("user=single\n")
            fp.write("doe=2100000\n")
            fp.write("loc=RND\n")
            fp.write("vt=2020605\n")
            fp.write("vtNum=141\n")
            fp.write("vtSerial=0\n")
            fp.write("sim=D101\n")
            fp.write("simNum=1,2,3\n")
            fp.write("wd=Working Directory\n")
            fp.write("wf=Working File\n")
            fp.write("ms=Mesh 2D or Pattern Mesh\n")
            fp.write("sm=Smart Input File\n")
            fp.write("grp=PCR\n")
            fp.write("val=press\n")
            fp.write("tp=contour\n")
            fp.write("vmin=50000\n")
            fp.write("vmax=500000\n")
            fp.write("size=1.0\n")
            fp.write("density=15\n")
            fp.write("angle=0\n")
            fp.write("fitting=6\n")
            cwd = getcwd()
            self.cwd = getCWD(cwd)
            fp.write("dir=%s\n"%(cwd))
            fp.close()
    
    def readSetting(self): 
        with open(self.settingFile) as SF: 
            lines = SF.readlines()
        for line in lines: 
            if "=" in line: 
                wd = line.split("=")[1]
            else: 
                continue 
            if 'address=' in line: 
                self.lineEdit_address.setText(wd.strip())
            if 'id=' in line: 
                self.lineEdit_hpc_ID.setText(wd.strip())
            if 'user=' in line: 
                if 'single' in line: self.radio_Single.setChecked(True)
                elif 'doe' in line:  self.radio_DOE.setChecked(True)
                else: 
                    if self.default_user: self.radio_Manual.setChecked(True)
            if 'doe=' in line: 
                self.lineEdit_DOE_ID.setText(wd.strip())
            if 'loc=' in line: self.lineEdit_0_Location.setText(wd.strip())
            if "vt=" in line: 
                self.lineEdit_1_VT_Number.setText(wd.strip())
            if "vtNum=" in line: 
                self.lineEdit_3_VT_Serial.setText(wd.strip())
            if "vtSerial=" in line: 
                self.lineEdit_2_VT_Revision.setText(wd.strip())

            if "sim=" in line:
                self.lineEdit_4_Sim_Type.setText(wd.strip())
            if "simNum=" in line:
                self.lineEdit_5_Sim_Num.setText(wd.strip())
            if "wd=" in line: 
                self.lineEdit_jobDir.setText(wd.strip())
            if "wf=" in line: 
                self.lineEdit_jobFile.setText(wd.strip())
            if "ms=" in line: 
                self.lineEdit_patternMesh.setText(wd.strip())
            if "sm=" in line: 
                self.lineEdit_smartFile.setText(wd.strip())
            if "grp=" in line: 
                if 'PC' in wd:  self.radio_PC.setChecked(True)
                else: self.radioTB.setChecked(True)
            if "vmin=" in line: 
                self.lineEdit_min_colorRange.setText(wd.strip())
            if "vmax=" in line: 
                self.lineEdit_max_colorRange.setText(wd.strip())
            if "size=" in line: 
                self.lineEdit_pointSize.setText(wd.strip())
            if "density=" in line: 
                self.lineEdit_PointsDensity.setText(wd.strip())
            if "angle=" in line: 
                self.lineEdit_rotating.setText(wd.strip())
            if "fitting=" in line: 
                self.lineEdit_fittingOrder.setText(wd.strip())
            if "dir=" in line: 
                self.cwd = wd.strip()

    def getRemoteFiles(self, workingDirectory, simulationID, manual=True): 
        jobFile =None 
        if workingDirectory[-1]!="/": workingDirectory+="/"

        try: 
            dirList =self.sftp.listdir(workingDirectory)
        except: 
            print ("No files in the directory : ", workingDirectory)
            return 

        for name in dirList: 
            if "-postfoot.dat" in name: 
                jobFile = makingFullFilePath_linux(workingDirectory, name )
                self.lineEdit_jobFile.setText(name)
                self.sftp.get(jobFile, self.localDat)
                print ("** COPIED: ", jobFile.split("/")[-1])
                break
                
        else: 
            simID = simulationID.split(".inp")[0]
            subdir = workingDirectory + "SFRIC." + simID +"/"
            try: 
                subdirList = self.sftp.listdir(subdir)
            except Exception as EX: 
                self.filename.setText(str(EX)+subdir)
                return 

            subdirList = sorted(subdirList)
            jobFile = makingFullFilePath_linux(subdir, subdirList[-1])
            self.lineEdit_jobFile.setText(subdirList[-1])

            if not ("sfric" != jobFile[:-5] and '.sfric' in jobFile) : 
                self.filename.setText("Footprint result was not found.")
                return 
            print ("** COPYING: ", jobFile[:-3])
            print ("** COPYING: ", jobFile)
            try: 
                self.sftp.get(jobFile[:-3], self.localSfric)
                self.sftp.get(jobFile, self.localSfricResult)
            except FileNotFoundError: 
                print (" No file found ", jobFile)
                return 

        if manual: 
            ptnMesh = self.lineEdit_patternMesh.text().strip()
            ptnMesh = ptnMesh.split(",")[0]
            ptnMesh = makingFullFilePath_linux(workingDirectory, ptnMesh)
            if ".ptn" in ptnMesh:   
                self.sftp.get(ptnMesh, self.localPtn)
                axi = getAXI_filename_SMARTInput(self.localSMART)
                self.sftp.get(axi, self.localAxi)
                LayoutMesh_From_axi(axi=self.localAxi, output=self.localMesh)
                print ("* Mesh 2d Generated Copied : ", axi.split("/")[-1])

            elif '.inp' in ptnMesh: 
                self.sftp.get(ptnMesh, self.localMesh)
                print ("** COPIED: ", ptnMesh.split("/")[-1])
            else: 
                if not isfile(self.localSMART): 
                    print (" NO SMART INPUT")
                axi = getAXI_filename_SMARTInput(self.localSMART)
                if not axi: 
                    print ("* NO FOUND AXI FILE NAME", axi)
                axi = makingFullFilePath_linux(workingDirectory, axi)
                print ('** COPYING:', axi)
                try: 
                    self.sftp.get(axi, self.localAxi)
                    LayoutMesh_From_axi(axi=self.localAxi, output=self.localMesh)
                    print ("* Mesh 2d Generated Copied : %s to %s"%(axi.split("/")[-1], self.localMesh))
                except : 
                    self.filename.setText("axi File not found.")
                    
                
        else: 
            for name in dirList:
                if ".ptn" in name: 
                    ptnMesh = makingFullFilePath_linux(workingDirectory, name)
                    self.sftp.get(ptnMesh, self.localPtn)
                    axi = getAXI_filename_SMARTInput(self.localSMART)
                    self.sftp.get(axi, self.localAxi)
                    print ("** COPIED: ", axi.split("/")[-1])
                    LayoutMesh_From_axi(axi=self.localAxi, output=self.localMesh)
            else: 
                localPtn = None 
                for name in dirList:
                    if '.inp' in name: 
                        if check2DMesh_File: 
                            mesh2d = makingFullFilePath_linux(workingDirectory, name)
                            self.sftp.get(mesh2d, self.localMesh)
                            print ("** COPIED: ", mesh2d.split("/")[-1])
                            if check2DMesh_File(self.localMesh): 
                                break 
                else: 
                    self.localMesh = None 
        
        try: remove(self.localISLMPoints)
        except: pass 

        for name in dirList: 
            if "-ContactShapePoint_Original.dat" in name: 
            # if "-ContactShapePoint.dat" in name: 
                ISLM_boundary_points = makingFullFilePath_linux(workingDirectory, name)
                self.sftp.get(ISLM_boundary_points, self.localISLMPoints)
                print ("** COPIED: ", name)
                break 
        for name in dirList: 
            if "-Contour_Original.dat" in name: 
            # if "-Contour.dat" in name: 
                ISLM_boundary_points = makingFullFilePath_linux(workingDirectory, name)
                self.sftp.get(ISLM_boundary_points, self.localContour)
                print ("** COPIED: ", name)
                break
        try: remove(self.localISLMFPC)
        except: pass 
        for name in dirList: 
            if "-FPC_Original.txt" in name: 
            # if "-FPC.txt" in name: 
                ISLM_FPC = makingFullFilePath_linux(workingDirectory, name)
                self.sftp.get(ISLM_FPC, self.localISLMFPC)
                print ("** COPIED: ", name)
                break 
        try: remove(self.localDeformed)
        except: pass 
        for name in dirList: 
            if "-Deformed_BTM.inp" in name: 
                ISLM_DFM = makingFullFilePath_linux(workingDirectory, name)
                self.sftp.get(ISLM_DFM, self.localDeformed)
                print ("** COPIED: ", name)
                break 

        for name in dirList: 
            if "-FPC.txt" in name: ## calibrated FPC 
                ISLM_DFM = makingFullFilePath_linux(workingDirectory, name)
                self.sftp.get(ISLM_DFM, self.localISLMCaliFPC)
                print ("** COPIED: ", name)
                break 

        for name in dirList: 
            if "-Contour.dat" in name: ## calibrated FPC 
                ISLM_DFM = makingFullFilePath_linux(workingDirectory, name)
                self.sftp.get(ISLM_DFM, self.localCaliContour)
                print ("** COPIED: ", name)
                break 

        for name in dirList: 
            if "-ContactShapePoint.dat" in name: 
            # if "-ContactShapePoint.dat" in name: 
                ISLM_boundary_points = makingFullFilePath_linux(workingDirectory, name)
                self.sftp.get(ISLM_boundary_points, self.localISLMCaliPoints)
                print ("** COPIED: ", name)
                break 


        return jobFile 
        

def checkSMART_File(file): 

    with open(file) as F: 
        lines = F.readlines()
    checks=[False, False, False]
    for line in lines: 
        if "*SIMULATION_TYPE" in line.upper(): checks[0] = True 
        if "*SIMULATION_TIME" in line.upper(): checks[1] = True 
        if "*SURFACES_FOR_CONTACT_AND_LOAD" in line.upper(): checks[2] = True 
    if checks[0] and checks[1] and checks[2]: 
        return True 
    else: 
        return False 
def getAXI_filename_SMARTInput(smartInput): 
    with open(smartInput) as IN: 
        lines = IN.readlines()
    for line in lines: 
        line = line.strip()
        if "*INCLUDE" in line.upper() and "INP=" in line.upper() and '.axi' == line[-4:].lower(): 
            return  line.split("=")[1].strip()
    return 

def check2DMesh_File(file): 
    with open(file) as F: 
        lines = F.readlines()
    checks=[False, False, False]
    for line in lines: 
        if "*ELEMENT" in line.upper() and "TYPE=CGAX4" in line.upper(): 
            checks[0] = True 
        if "*ELEMENT" in line.upper() and "TYPE=MGAX1" in line.upper(): 
            checks[1] = True 
        if "*SURFACE" in line.upper() and "TYPE=ELEMENT" in line.upper() and "NAME=CONT" in line.upper(): 
            checks[2] = True 
    if checks[0] and checks[1] and checks[2]: 
        return True 
    else: 
        return False 
def getSlipangle(smartfile): 
    with open(smartfile) as S: 
        lines = S.readlines()
    slip = None 
    for line in lines: 
        if "*LATERAL_CONTROL" in line: 
            wd = line.split("=")[1]
            ws = wd.split(",")
            if '1' in ws[0] : 
                slip = ws[1].strip()
                break
    return slip 

def getCWD(filename): 
    cwd=''
    drs = filename.split("/")
    for i, dr in enumerate(drs): 
        cwd += dr + '/'
        if i == len(drs) -2 : break
    return cwd 

def makingFullFilePath_linux(cwd=None, file=None): 
    if isinstance(cwd, type(None)): 
        cwd = getcwd()
    if cwd[-1] != "/": cwd+='/'

    if "../" in file: 
        names  =file.strip().split("../")
        cnt = 0 
        for name in names: 
            if "" in name: 
                cnt += 1 
        dirs = cwd.split("/")
        path =""
        for i in range(len(dirs)-cnt): 
            if dirs[i]=='':
                path +='/'
            else:
                path += dirs[i]+'/'
        for name in names: 
            if name != "": 
                path += name 
    elif '/home' == file[:5]: 
        path = file 
    elif '' == file: 
        return cwd
    else: 
        if '/' == file[0]: 
            file = file[1:]
        path = cwd + file 

    return path 



if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    ui.initialze()
    # MainWindow.showMaximized()
    MainWindow.show()

    sys.exit(app.exec_())


